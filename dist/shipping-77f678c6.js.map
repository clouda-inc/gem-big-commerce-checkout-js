{"version":3,"file":"shipping-77f678c6.js","mappings":"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AiC,CAC9Bd,QAASS,EACT3E,UAAWA,EACXwO,aAAcA,EACd3O,WAAYA,EACZ0O,WAAYA,EACZrO,UAAWA,EACXiI,SAAUA,EACVqI,gBAAiBA,EACjBlC,cAAeA,EACftC,iBAAkBA,GAG9B,E,wBCxCM0E,GAAW,CACf,OACA,OACA,SACA,MACA,MACA,SACA,OACA,UACA,QACA,UACA,OACA,OACA,QACA,WACA,OACA,MACA,OACA,QACA,SACA,OACA,QACA,UACA,QACA,MACA,QACA,SACA,OACA,SACA,UACA,KACA,SACA,OACA,QACA,OACA,QACA,OACA,SACA,UACA,OACA,OACA,QACA,QACA,UACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,SACA,MACA,UACA,QACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,QACA,OACA,OACA,SACA,MACA,SACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,SACA,QACA,UACA,OACA,MACA,OACA,SACA,OACA,SACA,UACA,QACA,UACA,OACA,SACA,UACA,SACA,QACA,SACA,QACA,MACA,QACA,QACA,OACA,OACA,SACA,SACA,UACA,SACA,MACA,QACA,MACA,SACA,UACA,UACA,SACA,OACA,MACA,SACA,WACA,UACA,OACA,QACA,SACA,SACA,SACA,QACA,OACA,UACA,QACA,MACA,MACA,MACA,QACA,QACA,OACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,MACA,UACA,QACA,SACA,WACA,UACA,UACA,QACA,WACA,WACA,QACA,QACA,SACA,WACA,SACA,SACA,OACA,QACA,QACA,OACA,MACA,MACA,OACA,SACA,WC1HIC,GAAmB,kBAGzB,0E,OAoQU,EAAA1Q,cAAiE,SACvE2Q,EACAC,GAEM,MAGF,EAAK7L,MAFG/E,EAAa,uBAQnB6Q,EAPM,aAITnE,QAAO,SAACoC,GAAU,OAAAA,EAAMgC,MAAN,IAClB1M,KAAI,SAAC0K,GAAU,OAA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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/editShippingAddress/util.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n  WithCheckoutShippingOptionsProps &\n  AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n  ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n  private unsubscribe?: () => void;\n\n  componentDidMount(): void {\n    const { subscribeToConsignments } = this.props;\n\n    this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n  }\n\n  componentDidUpdate(): void {\n    const { analyticsTracker, consignments, shouldShowShippingOptions } = this.props;\n\n    if (consignments?.length && shouldShowShippingOptions) {\n      analyticsTracker.showShippingMethods();\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      consignments,\n      isMultiShippingMode,\n      selectShippingOption,\n      isLoading,\n      shouldShowShippingOptions,\n      invalidShippingMessage,\n      methodId,\n    } = this.props;\n\n    if (!consignments?.length || !shouldShowShippingOptions) {\n      return (\n        <ChecklistSkeleton\n          additionalClassName=\"shippingOptions-skeleton\"\n          isLoading={isLoading()}\n          rows={2}\n        >\n          {this.renderNoShippingOptions(\n            <TranslatedString\n              id={\n                methodId || isMultiShippingMode\n                  ? 'shipping.select_shipping_address_text'\n                  : 'shipping.enter_shipping_address_text'\n              }\n            />,\n          )}\n        </ChecklistSkeleton>\n      );\n    }\n\n    return (\n      <>\n        {consignments.map((consignment) => (\n          <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n            {isMultiShippingMode && this.renderConsignment(consignment)}\n\n            <ShippingOptionsList\n              consignmentId={consignment.id}\n              inputName={getRadioInputName(consignment.id)}\n              isLoading={isLoading(consignment.id)}\n              isMultiShippingMode={isMultiShippingMode}\n              onSelectedOption={selectShippingOption}\n              selectedShippingOptionId={\n                consignment.selectedShippingOption && consignment.selectedShippingOption.id\n              }\n              shippingOptions={consignment.availableShippingOptions}\n            />\n\n            {(!consignment.availableShippingOptions ||\n              !consignment.availableShippingOptions.length) && (\n              <ChecklistSkeleton\n                additionalClassName=\"shippingOptions-skeleton\"\n                isLoading={isLoading(consignment.id)}\n                rows={2}\n              >\n                {this.renderNoShippingOptions(invalidShippingMessage)}\n              </ChecklistSkeleton>\n            )}\n          </div>\n        ))}\n      </>\n    );\n  }\n\n  private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n    const { selectShippingOption, setFieldValue } = this.props;\n\n    const consignment = (data.getConsignments() || []).find(\n      ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n        !selectedShippingOption && shippingOptions,\n    );\n\n    if (!consignment || !consignment.availableShippingOptions) {\n      return;\n    }\n\n    const { availableShippingOptions, id } = consignment;\n    const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n    const singleShippingOption =\n      availableShippingOptions.length === 1 && availableShippingOptions[0];\n    const defaultShippingOption = recommendedOption || singleShippingOption;\n\n    if (!defaultShippingOption) {\n      return;\n    }\n\n    await selectShippingOption(id, defaultShippingOption.id);\n    setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n  };\n\n  private renderNoShippingOptions(message: ReactNode): ReactNode {\n    return (\n      <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n        <p\n          aria-live=\"polite\"\n          className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n          role=\"alert\"\n        >\n          {message}\n        </p>\n      </div>\n    );\n  }\n\n  private renderConsignment(consignment: Consignment): ReactNode {\n    const { cart } = this.props;\n\n    return (\n      <div className=\"staticConsignment\">\n        <strong>\n          <TranslatedString id=\"shipping.shipping_address_heading\" />\n        </strong>\n\n        <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n        <StaticConsignmentItemList cart={cart} consignment={consignment} />\n      </div>\n    );\n  }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n  return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n  shippingOptionIds: {\n    [shippingOptionIds: string]: string;\n  };\n}\n\nexport default withAnalytics(\n  withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n      const shippingOptionIds: { [id: string]: string } = {};\n\n      (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n          ? consignment.selectedShippingOption.id\n          : '';\n      });\n\n      return { shippingOptionIds };\n    },\n  })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n  isInitialValueLoaded: boolean;\n  isMultiShippingMode: boolean;\n  isUpdatingAddress?: boolean;\n  shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n  invalidShippingMessage: string;\n  methodId?: string;\n  consignments?: Consignment[];\n  cart: Cart;\n  isSelectingShippingOption(consignmentId?: string): boolean;\n  subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n  selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n  isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n  ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n  (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n    return subscribe(subscriber, ({ data }) => data.getConsignments());\n  },\n);\n\nconst isLoadingSelector = createSelector(\n  (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n  ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n  ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n  ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n  ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n  (\n    isUpdatingAddress,\n    isLoadingShippingOptions,\n    isSelectingShippingOption,\n    isUpdatingConsignment,\n    isCreatingConsignments,\n  ) => {\n    return (consignmentId?: string) => {\n      return (\n        isUpdatingAddress ||\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption(consignmentId) ||\n        isUpdatingConsignment(consignmentId) ||\n        isCreatingConsignments()\n      );\n    };\n  },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n  if (unsortedConsignments.length < 2) {\n    return unsortedConsignments;\n  }\n\n  const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n  const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n  return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n  { checkoutService, checkoutState }: CheckoutContextProps,\n  props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n  const {\n    data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n    statuses: { isSelectingShippingOption },\n  } = checkoutState;\n\n  const customer = getCustomer();\n  const cart = getCart();\n  const config = getConfig();\n  const checkout = getCheckout();\n\n  if (!config || !checkout || !customer || !cart) {\n    return null;\n  }\n\n  const consignments = sortConsignments(cart, getConsignments() || []);\n  const methodId = getShippingMethodId(checkout, config);\n  const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n  return {\n    cart,\n    consignments,\n    invalidShippingMessage: shippingQuoteFailedMessage,\n    isLoading: isLoadingSelector(checkoutState, props),\n    isSelectingShippingOption,\n    methodId,\n    selectShippingOption: checkoutService.selectConsignmentShippingOption,\n    subscribeToConsignments: subscribeToConsignmentsSelector({\n      checkoutService,\n      checkoutState,\n    }),\n  };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\n// import { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  shouldShowOrderComments: boolean;\n  shouldShowShippingOptions?: boolean;\n  shouldDisableSubmit: boolean;\n  isInitialValueLoaded: boolean;\n  isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n  cartHasChanged,\n  isMultiShippingMode,\n  // shouldShowOrderComments,\n  shouldShowShippingOptions = true,\n  shouldDisableSubmit,\n  isInitialValueLoaded,\n  isLoading,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n      <Fieldset\n        id=\"checkout-shipping-options\"\n        legend={\n          <>\n            <Legend>\n              <TranslatedString id=\"shipping.shipping_method_label\" />\n            </Legend>\n\n            {cartHasChanged && (\n              <Alert type={AlertType.Error}>\n                <strong>\n                  <TranslatedString id=\"shipping.cart_change_error\" />\n                </strong>\n              </Alert>\n            )}\n          </>\n        }\n      >\n        <ShippingOptions\n          isInitialValueLoaded={isInitialValueLoaded}\n          isMultiShippingMode={isMultiShippingMode}\n          isUpdatingAddress={isLoading}\n          shouldShowShippingOptions={shouldShowShippingOptions}\n        />\n      </Fieldset>\n\n      {/* {shouldShowOrderComments && <OrderComments />} */}\n\n      <div className=\"form-actions\">\n        <Button\n          disabled={shouldDisableSubmit}\n          id=\"checkout-shipping-continue\"\n          isLoading={isLoading}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ShippingFormFooter;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutSelectors,\n  CheckoutStoreSelector,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n  TranslatedLink,\n  TranslatedString,\n  withLanguage,\n  WithLanguageProps,\n} from '@bigcommerce/checkout/locale';\n\nimport {\n  AddressFormModal,\n  AddressFormValues,\n  isValidAddress,\n  mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\nimport { withFormikExtended } from '../common/form';\n\nexport interface MultiShippingFormProps {\n  addresses: CustomerAddress[];\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  customerMessage: string;\n  isGuest: boolean;\n  isLoading: boolean;\n  shouldShowOrderComments: boolean;\n  defaultCountryCode?: string;\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): void;\n  onSignIn(): void;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: MultiShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n  key: string;\n  itemId: string;\n}\n\nexport interface MultiShippingFormState {\n  items: ShippableItem[];\n  itemAddingAddress?: ShippableItemId;\n  createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n  MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n  MultiShippingFormState\n> {\n  static getDerivedStateFromProps(\n    { cart, consignments }: MultiShippingFormProps,\n    state: MultiShippingFormState,\n  ) {\n    if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n      return { items: getShippableLineItems(cart, consignments) };\n    }\n\n    return null;\n  }\n\n  state: MultiShippingFormState = { items: [] };\n\n  render(): ReactNode {\n    const {\n      addresses,\n      consignments,\n      cart,\n      isGuest,\n      onSignIn,\n      onCreateAccount,\n      cartHasChanged,\n      shouldShowOrderComments,\n      isInitialValueLoaded,\n      isLoading,\n      getFields,\n      defaultCountryCode,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n    } = this.props;\n\n    const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n    if (isGuest) {\n      return (\n        <div className=\"checkout-step-info\">\n          <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n          <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={preventDefault(onSignIn)}>\n            <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n          </a>{' '}\n          <TranslatedLink id=\"shipping.multishipping_guest_create\" onClick={onCreateAccount} />\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <ErrorModal\n          error={createCustomerAddressError}\n          message={\n            <>\n              <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n              <TranslatedString id=\"customer.create_address_error\" />\n            </>\n          }\n          onClose={this.handleCloseErrorModal}\n          shouldShowErrorCode={false}\n        />\n        <AddressFormModal\n          countries={countries}\n          countriesWithAutocomplete={countriesWithAutocomplete}\n          defaultCountryCode={defaultCountryCode}\n          getFields={getFields}\n          googleMapsApiKey={googleMapsApiKey}\n          isFloatingLabelEnabled={isFloatingLabelEnabled}\n          isLoading={isLoading}\n          isOpen={!!itemAddingAddress}\n          onRequestClose={this.handleCloseAddAddressForm}\n          onSaveAddress={this.handleSaveAddress}\n        />\n\n        <Form>\n          <ul className=\"consignmentList\">\n            {items.map((item) => (\n              <li key={item.key}>\n                <ItemAddressSelect\n                  addresses={addresses}\n                  item={item}\n                  onSelectAddress={this.handleSelectAddress}\n                  onUseNewAddress={this.handleUseNewAddress}\n                />\n              </li>\n            ))}\n          </ul>\n\n          <ShippingFormFooter\n            cartHasChanged={cartHasChanged}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={true}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowShippingOptions={!hasUnassignedLineItems(consignments, cart.lineItems)}\n          />\n        </Form>\n      </>\n    );\n  }\n\n  private handleCloseErrorModal: () => void = () => {\n    this.setState({ createCustomerAddressError: undefined });\n  };\n\n  private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n    const { createCustomerAddress } = this.props;\n    const { itemAddingAddress } = this.state;\n\n    if (!itemAddingAddress) {\n      return;\n    }\n\n    const shippingAddress = mapAddressFromFormValues(address);\n\n    await this.handleSelectAddress(\n      shippingAddress,\n      itemAddingAddress.itemId,\n      itemAddingAddress.key,\n    );\n\n    try {\n      await createCustomerAddress(shippingAddress);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.setState({ createCustomerAddressError: error });\n      }\n    }\n\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleUseNewAddress: (itemId: string, itemKey: string) => void = (itemId, itemKey) => {\n    this.setState({\n      itemAddingAddress: {\n        key: itemKey,\n        itemId,\n      },\n    });\n  };\n\n  private handleCloseAddAddressForm: () => void = () => {\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleSelectAddress: (\n    address: Address,\n    itemId: string,\n    itemKey: string,\n  ) => Promise<void> = async (address, itemId, itemKey) => {\n    const { assignItem, onUnhandledError, getFields } = this.props;\n\n    if (!isValidAddress(address, getFields(address.countryCode))) {\n      return onUnhandledError(new AssignItemInvalidAddressError());\n    }\n\n    try {\n      const { data } = await assignItem({\n        address,\n        lineItems: [\n          {\n            itemId,\n            quantity: 1,\n          },\n        ],\n      });\n\n      this.syncItems(itemKey, address, data);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(new AssignItemFailedError(error));\n      }\n    }\n  };\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments } = this.props;\n\n    return isLoading || !hasSelectedShippingOptions(consignments);\n  };\n\n  private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n    key,\n    address,\n    data,\n  ) => {\n    const { items: currentItems } = this.state;\n    const items = updateShippableItems(\n      currentItems,\n      {\n        updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n        address,\n      },\n      {\n        cart: data.getCart(),\n        consignments: data.getConsignments(),\n      },\n    );\n\n    if (items) {\n      this.setState({ items });\n    }\n  };\n}\n\nexport interface MultiShippingFormValues {\n  orderComment: string;\n}\n\nexport default withLanguage(\n  withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n      orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n  })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","const nameList = [\n  'Time',\n  'Past',\n  'Future',\n  'Dev',\n  'Fly',\n  'Flying',\n  'Soar',\n  'Soaring',\n  'Power',\n  'Falling',\n  'Fall',\n  'Jump',\n  'Cliff',\n  'Mountain',\n  'Rend',\n  'Red',\n  'Blue',\n  'Green',\n  'Yellow',\n  'Gold',\n  'Demon',\n  'Demonic',\n  'Panda',\n  'Cat',\n  'Kitty',\n  'Kitten',\n  'Zero',\n  'Memory',\n  'Trooper',\n  'XX',\n  'Bandit',\n  'Fear',\n  'Light',\n  'Glow',\n  'Tread',\n  'Deep',\n  'Deeper',\n  'Deepest',\n  'Mine',\n  'Your',\n  'Worst',\n  'Enemy',\n  'Hostile',\n  'Force',\n  'Video',\n  'Game',\n  'Donkey',\n  'Mule',\n  'Colt',\n  'Cult',\n  'Cultist',\n  'Magnum',\n  'Gun',\n  'Assault',\n  'Recon',\n  'Trap',\n  'Trapper',\n  'Redeem',\n  'Code',\n  'Script',\n  'Writer',\n  'Near',\n  'Close',\n  'Open',\n  'Cube',\n  'Circle',\n  'Geo',\n  'Genome',\n  'Germ',\n  'Spaz',\n  'Shot',\n  'Echo',\n  'Beta',\n  'Alpha',\n  'Gamma',\n  'Omega',\n  'Seal',\n  'Squid',\n  'Money',\n  'Cash',\n  'Lord',\n  'King',\n  'Duke',\n  'Rest',\n  'Fire',\n  'Flame',\n  'Morrow',\n  'Break',\n  'Breaker',\n  'Numb',\n  'Ice',\n  'Cold',\n  'Rotten',\n  'Sick',\n  'Sickly',\n  'Janitor',\n  'Camel',\n  'Rooster',\n  'Sand',\n  'Desert',\n  'Dessert',\n  'Hurdle',\n  'Racer',\n  'Eraser',\n  'Erase',\n  'Big',\n  'Small',\n  'Short',\n  'Tall',\n  'Sith',\n  'Bounty',\n  'Hunter',\n  'Cracked',\n  'Broken',\n  'Sad',\n  'Happy',\n  'Joy',\n  'Joyful',\n  'Crimson',\n  'Destiny',\n  'Deceit',\n  'Lies',\n  'Lie',\n  'Honest',\n  'Destined',\n  'Bloxxer',\n  'Hawk',\n  'Eagle',\n  'Hawker',\n  'Walker',\n  'Zombie',\n  'Sarge',\n  'Capt',\n  'Captain',\n  'Punch',\n  'One',\n  'Two',\n  'Uno',\n  'Slice',\n  'Slash',\n  'Melt',\n  'Melted',\n  'Melting',\n  'Fell',\n  'Wolf',\n  'Hound',\n  'Legacy',\n  'Sharp',\n  'Dead',\n  'Mew',\n  'Chuckle',\n  'Bubba',\n  'Bubble',\n  'Sandwich',\n  'Smasher',\n  'Extreme',\n  'Multi',\n  'Universe',\n  'Ultimate',\n  'Death',\n  'Ready',\n  'Monkey',\n  'Elevator',\n  'Wrench',\n  'Grease',\n  'Head',\n  'Theme',\n  'Grand',\n  'Cool',\n  'Kid',\n  'Boy',\n  'Girl',\n  'Vortex',\n  'Paradox',\n];\n\nexport const getRandomName = () => {\n  return nameList[Math.floor(Math.random() * nameList.length)];\n};\n","/* eslint-disable no-console */\nimport {\n  Address,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n  AddressForm,\n  // AddressSelect,\n  AddressType,\n  isEqualAddress,\n  isValidCustomerAddress,\n  StaticAddress,\n} from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n// import { Modal } from '../ui/modal';\n\n// import ShippingAddressEditForm from './editShippingAddress';\nimport { getRandomName } from './editShippingAddress/util';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nimport './ShippingAddressForm.scss';\n\nexport interface ShippingAddressFormProps {\n  addresses: CustomerAddress[];\n  address?: Address;\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  formFields: FormField[];\n  shouldShowSaveAddress?: boolean;\n  isFloatingLabelEnabled?: boolean;\n  onUseNewAddress(currentAddress?: Address): void;\n  onFieldChange(fieldName: string, value: string): void;\n  onAddressSelect(address: Address): void;\n}\n\ninterface ShippingEditFormState {\n  editAddress: CustomerAddress;\n  showEditAddressModal: boolean;\n}\n\nconst addressFieldName = 'shippingAddress';\nconst token = 'q64h3xndgjcrd3vn1iggj9iypp2tyzi';\n\nclass ShippingAddressForm extends Component<\n  ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>,\n  ShippingEditFormState\n> {\n  // constructor(props: ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>) {\n  //   super(props);\n  //   this.state = {\n  //     editAddress: {} as CustomerAddress,\n  //     showEditAddressModal: false,\n  //   };\n  // }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      address: shippingAddress,\n      onAddressSelect,\n      onUseNewAddress,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      formFields,\n      isLoading,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n      formik: {\n        values: { shippingAddress: formAddress },\n      },\n    } = this.props;\n\n    // const { editAddress, showEditAddressModal } = this.state;\n\n    const hasAddresses = addresses && addresses.length > 0;\n    const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n    console.log('hasValidCustomerAddress : ', hasValidCustomerAddress);\n    console.log('shippingAddress : ', shippingAddress);\n    console.log('addresses : ', addresses);\n\n    const handleUseNewAddress = () => {\n      onUseNewAddress(shippingAddress);\n    };\n\n    const handleSelectAddress = (newAddress: Address) => {\n      if (!isEqualAddress(shippingAddress, newAddress)) {\n        onAddressSelect(newAddress);\n      }\n    };\n\n    // const handleEditAddress = (address: CustomerAddress) => {\n    //   console.log('address : ', address);\n    //   this.setState({ editAddress: address, showEditAddressModal: true });\n    // };\n\n    // const handleCloseEditAddressModal = () => {\n    //   this.setState({ showEditAddressModal: false });\n    // };\n\n    // const onSubmit = (e: any) => {\n    //   e.preventDefault();\n\n    //   const formData = new FormData(e.target);\n\n    //   console.log('onSubmit : ', formData);\n    // };\n\n    const handleUpdateCustomerAddress = (address: CustomerAddress) => {\n      console.log('address : ', address);\n      fetch('https://api.bigcommerce.com/stores/qxtizk9ym4/v3/customers/addresses', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'X-Auth-Token': token,\n        },\n        body: JSON.stringify([\n          {\n            id: address?.id,\n            first_name: `${getRandomName()}`,\n            last_name: address?.lastName,\n            address1: address?.address1,\n            address2: address?.address2,\n            city: address?.city,\n            state_or_province: address?.stateOrProvince,\n            postal_code: address?.postalCode,\n            country_code: address?.countryCode,\n            phone: address?.phone,\n            address_type: address?.type,\n          },\n        ]),\n      })\n        .then((r) => r.json())\n        .then((r) => {\n          console.log('R : Result :', r.data[0]);\n          handleSelectAddress(r.data[0]);\n          window.location.reload();\n        })\n        .catch((e) => {\n          console.error('Error : ', e);\n        });\n    };\n\n    return (\n      <Fieldset id=\"checkoutShippingAddress\">\n        {hasAddresses && (\n          <Fieldset id=\"shippingAddresses\">\n            <LoadingOverlay isLoading={isLoading}>\n              <div className=\"shipping-address-list-wrapper\">\n                <div\n                  className=\"add-new-address\"\n                  data-test=\"add-new-address\"\n                  onClick={handleUseNewAddress}\n                >\n                  <TranslatedString id=\"address.enter_address_action\" />\n                </div>\n                {/* <AddressSelect\n                  addresses={addresses}\n                  onSelectAddress={onAddressSelect}\n                  onUseNewAddress={onUseNewAddress}\n                  selectedAddress={hasValidCustomerAddress ? shippingAddress : undefined}\n                  type={AddressType.Shipping}\n                /> */}\n                <div className=\"shipping-address-list-container\">\n                  {addresses &&\n                    addresses?.map((address, index: number) => {\n                      return (\n                        <div className=\"shipping-address\" key={index}>\n                          <div className=\"shipping-address-with-selector\">\n                            <div>\n                              <input\n                                checked={!!isEqualAddress(shippingAddress, address)}\n                                className=\"shipping-address-with-selector-input\"\n                                onClick={() => handleSelectAddress(address)}\n                                type=\"radio\"\n                              />\n                            </div>\n                            <StaticAddress address={address} type={AddressType.Shipping} />\n                          </div>\n                          <button\n                            className=\"shipping-address-edit-button\"\n                            onClick={(event) => {\n                              event.preventDefault();\n                              handleUpdateCustomerAddress(address);\n                              // handleEditAddress(address);\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </div>\n                      );\n                    })}\n                </div>\n              </div>\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n\n        {!hasValidCustomerAddress && (\n          <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n            <AddressForm\n              countries={countries}\n              countriesWithAutocomplete={countriesWithAutocomplete}\n              countryCode={formAddress && formAddress.countryCode}\n              fieldName={addressFieldName}\n              formFields={formFields}\n              googleMapsApiKey={googleMapsApiKey}\n              isFloatingLabelEnabled={isFloatingLabelEnabled}\n              onAutocompleteToggle={this.handleAutocompleteToggle}\n              onChange={this.handleChange}\n              setFieldValue={this.setFieldValue}\n              shouldShowSaveAddress={shouldShowSaveAddress}\n            />\n          </LoadingOverlay>\n        )}\n        {/* <Modal\n          additionalBodyClassName=\"modal-body--center\"\n          closeButtonLabel=\"close\"\n          isOpen={showEditAddressModal}\n          onRequestClose={handleCloseEditAddressModal}\n          shouldShowCloseButton={true}\n        >\n          <div>\n            <form style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, firstName: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.firstName}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, lastName: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.lastName}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address1: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address1}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address2: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address2}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, city: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.city}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({\n                      editAddress: { ...editAddress, stateOrProvince: e.target.value },\n                    });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.stateOrProvince}\n                />\n              </div>\n              <div>\n                <input\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, postalCode: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.country}\n                />\n              </div>\n              <div>\n                <button onClick={(e) => onSubmit(e)} type=\"submit\">\n                  Save\n                </button>\n              </div>\n            </form>\n          </div>\n        </Modal> */}\n      </Fieldset>\n    );\n  }\n\n  private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n    fieldName,\n    fieldValue,\n  ) => {\n    const {\n      formik: { setFieldValue },\n      formFields,\n    } = this.props;\n\n    const customFormFieldNames = formFields\n      .filter((field) => field.custom)\n      .map((field) => field.name);\n\n    const formFieldName = customFormFieldNames.includes(fieldName)\n      ? `customFields.${fieldName}`\n      : fieldName;\n\n    setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n  };\n\n  private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    const { onFieldChange } = this.props;\n\n    onFieldChange(fieldName, value);\n  };\n\n  private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n    isOpen,\n    inputValue,\n  }) => {\n    const { onFieldChange } = this.props;\n\n    if (!isOpen) {\n      onFieldChange('address1', inputValue);\n    }\n  };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n  Address,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport {\n  isPayPalFastlaneMethod,\n  usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n  addresses: CustomerAddress[];\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  formFields: FormField[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  hasRequestedShippingOptions: boolean;\n  isFloatingLabelEnabled?: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onAddressSelect(address: Address): void;\n  onFieldChange(name: string, value: string): void;\n  onUnhandledError?(error: Error): void;\n  onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n  const {\n    methodId,\n    formFields,\n    countries,\n    countriesWithAutocomplete,\n    consignments,\n    googleMapsApiKey,\n    onAddressSelect,\n    onFieldChange,\n    onUseNewAddress,\n    isLoading,\n    shippingAddress,\n    hasRequestedShippingOptions,\n    addresses,\n    shouldShowSaveAddress,\n    isFloatingLabelEnabled,\n  } = props;\n\n  const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n  const { setSubmitted } = useContext(FormContext);\n\n  const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    if (hasRequestedShippingOptions) {\n      setSubmitted(true);\n    }\n\n    onFieldChange(fieldName, value);\n  };\n\n  if (methodId === 'amazonpay' && shippingAddress) {\n    return <AmazonPayShippingAddress {...props} shippingAddress={shippingAddress} />;\n  }\n\n  if (\n    methodId &&\n    isPayPalFastlaneMethod(methodId) &&\n    shippingAddress &&\n    shouldShowPayPalFastlaneShippingForm\n  ) {\n    return (\n      <PayPalFastlaneShippingAddress\n        {...props}\n        methodId={methodId}\n        shippingAddress={shippingAddress}\n      />\n    );\n  }\n\n  return (\n    <ShippingAddressForm\n      address={shippingAddress}\n      addresses={addresses}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      formFields={formFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isLoading={isLoading}\n      onAddressSelect={onAddressSelect}\n      onFieldChange={handleFieldChange}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n    />\n  );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isEqualAddress,\n  mapAddressFromFormValues,\n  mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n  addresses: CustomerAddress[];\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shippingAutosaveDelay?: number;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isResettingAddress: boolean;\n  isUpdatingShippingData: boolean;\n  hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n  const methodIdsWithoutCustomValidation: string[] = [\n    PaymentMethodId.BraintreeAcceleratedCheckout,\n    PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n  ];\n\n  return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isResettingAddress: false,\n    isUpdatingShippingData: false,\n    hasRequestedShippingOptions: false,\n  };\n\n  private debouncedUpdateAddress: any;\n\n  constructor(\n    props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n  ) {\n    super(props);\n\n    const { updateAddress } = this.props;\n\n    this.debouncedUpdateAddress = debounce(\n      async (address: Address, includeShippingOptions: boolean) => {\n        try {\n          await updateAddress(address, {\n            params: {\n              include: {\n                'consignments.availableShippingOptions': includeShippingOptions,\n              },\n            },\n          });\n\n          if (includeShippingOptions) {\n            this.setState({ hasRequestedShippingOptions: true });\n          }\n        } finally {\n          this.setState({ isUpdatingShippingData: false });\n        }\n      },\n      props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n    );\n  }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      onUnhandledError,\n      methodId,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      values: { shippingAddress: addressForm },\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n    } = this.props;\n\n    const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } = this.state;\n\n    const PAYMENT_METHOD_VALID = ['amazonpay'];\n    const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n      (method) => method === methodId,\n    );\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <ShippingAddress\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            deinitialize={deinitialize}\n            formFields={this.getFields(addressForm && addressForm.countryCode)}\n            googleMapsApiKey={googleMapsApiKey}\n            hasRequestedShippingOptions={hasRequestedShippingOptions}\n            initialize={initialize}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isResettingAddress}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onAddressSelect={this.handleAddressSelect}\n            onFieldChange={this.handleFieldChange}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={this.onUseNewAddress}\n            shippingAddress={shippingAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n          />\n          {shouldShowBillingSameAsShipping && (\n            <div className=\"form-body\">\n              <BillingSameAsShippingField />\n            </div>\n          )}\n        </Fieldset>\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleFieldChange: (name: string) => void = async (name) => {\n    const { setFieldValue } = this.props;\n\n    if (name === 'countryCode') {\n      setFieldValue('shippingAddress.stateOrProvince', '');\n      setFieldValue('shippingAddress.stateOrProvinceCode', '');\n    }\n\n    // Enqueue the following code to run after Formik has run validation\n    await new Promise((resolve) => setTimeout(resolve));\n\n    const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n    const { hasRequestedShippingOptions } = this.state;\n\n    const { isValid } = this.props;\n\n    if (!isValid) {\n      return;\n    }\n\n    this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n  };\n\n  private updateAddressWithFormData(includeShippingOptions: boolean) {\n    const {\n      shippingAddress,\n      values: { shippingAddress: addressForm },\n    } = this.props;\n\n    const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n    if (Array.isArray(shippingAddress?.customFields)) {\n      includeShippingOptions =\n        !isEqual(shippingAddress?.customFields, updatedShippingAddress?.customFields) ||\n        includeShippingOptions;\n    }\n\n    if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n      return;\n    }\n\n    this.setState({ isUpdatingShippingData: true });\n    this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n  }\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private onUseNewAddress: () => void = async () => {\n    const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      const address = await deleteConsignments();\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(\n          this.getFields(address && address.countryCode),\n          address,\n        ),\n      });\n    } catch (e) {\n      onUnhandledError(e);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      shouldHaveCustomValidation(methodId)\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(SingleShippingForm),\n);\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n  addresses: CustomerAddress[];\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isBillingSameAsShipping: boolean;\n  isGuest: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  onMultiShippingSubmit(values: MultiShippingFormValues): void;\n  onSignIn(): void;\n  onSingleShippingSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n  addresses,\n  assignItem,\n  cart,\n  cartHasChanged,\n  createCustomerAddress,\n  consignments,\n  countries,\n  countriesWithAutocomplete,\n  onCreateAccount,\n  customerMessage,\n  deinitialize,\n  deleteConsignments,\n  getFields,\n  googleMapsApiKey,\n  initialize,\n  isBillingSameAsShipping,\n  isGuest,\n  isLoading,\n  isMultiShippingMode,\n  methodId,\n  onMultiShippingSubmit,\n  onSignIn,\n  onSingleShippingSubmit,\n  onUnhandledError,\n  onUseNewAddress,\n  shippingAddress,\n  shouldShowOrderComments,\n  shouldShowSaveAddress,\n  signOut,\n  updateAddress,\n  isShippingStepPending,\n  isFloatingLabelEnabled,\n  isInitialValueLoaded,\n}: ShippingFormProps & WithLanguageProps) => {\n  // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses, shouldShowPayPalFastlaneShippingForm } =\n    usePayPalFastlaneAddress();\n\n  const shippingAddresses =\n    isPayPalFastlaneEnabled && isGuest ? paypalFastlaneAddresses : addresses;\n\n  useEffect(() => {\n    if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n      initialize({ methodId });\n    }\n  }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n  return isMultiShippingMode ? (\n    <MultiShippingForm\n      addresses={shippingAddresses}\n      assignItem={assignItem}\n      cart={cart}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      createCustomerAddress={createCustomerAddress}\n      customerMessage={customerMessage}\n      defaultCountryCode={shippingAddress?.countryCode}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isGuest={isGuest}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      onCreateAccount={onCreateAccount}\n      onSignIn={onSignIn}\n      onSubmit={onMultiShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n    />\n  ) : (\n    <SingleShippingForm\n      addresses={shippingAddresses}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      customerMessage={customerMessage}\n      deinitialize={deinitialize}\n      deleteConsignments={deleteConsignments}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      initialize={initialize}\n      isBillingSameAsShipping={isBillingSameAsShipping}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      isMultiShippingMode={isMultiShippingMode}\n      isShippingStepPending={isShippingStepPending}\n      methodId={methodId}\n      onSubmit={onSingleShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      shippingAddress={shippingAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n      signOut={signOut}\n      updateAddress={updateAddress}\n    />\n  );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n  isMultiShippingMode: boolean;\n  isGuest: boolean;\n  shouldShowMultiShipping: boolean;\n  onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n  isMultiShippingMode,\n  isGuest,\n  onMultiShippingChange,\n  shouldShowMultiShipping,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n      <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n          <TranslatedString\n            id={\n              isMultiShippingMode\n                ? isGuest\n                  ? 'shipping.multishipping_address_heading_guest'\n                  : 'shipping.multishipping_address_heading'\n                : 'shipping.shipping_address_heading'\n            }\n          />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n          <a\n            data-test=\"shipping-mode-toggle\"\n            href=\"#\"\n            onClick={preventDefault(onMultiShippingChange)}\n          >\n            <TranslatedString\n              id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n            />\n          </a>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  customerMessage: string;\n  isLoading: boolean;\n  isShippingMethodLoading: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowOrderComments: boolean;\n  step: CheckoutStepStatus;\n  isInitialValueLoaded: boolean;\n  isStripeLoading?(): void;\n  isStripeAutoStep?(): void;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isUpdatingShippingData: false,\n  };\n\n  render(): ReactNode {\n    const {\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      countries,\n      isStripeLoading,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      onSubmit,\n      isStripeAutoStep,\n      step,\n      isShippingMethodLoading,\n    } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <StripeShippingAddress\n            consignments={consignments}\n            countries={countries}\n            deinitialize={deinitialize}\n            initialize={initialize}\n            isShippingMethodLoading={isShippingMethodLoading}\n            isStripeAutoStep={isStripeAutoStep}\n            isStripeLoading={isStripeLoading}\n            onAddressSelect={this.handleAddressSelect}\n            onSubmit={onSubmit}\n            shippingAddress={shippingAddress}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            step={step}\n          />\n          <div className=\"form-body\">\n            <BillingSameAsShippingField />\n          </div>\n        </Fieldset>\n\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      methodId\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  Customer,\n  CustomerRequestOptions,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  step: CheckoutStepStatus;\n  onCreateAccount(): void;\n  onToggleMultiShipping(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n  onSignIn(): void;\n  navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n  billingAddress?: Address;\n  cart: Cart;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isGuest: boolean;\n  isInitializing: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowMultiShipping: boolean;\n  shouldShowOrderComments: boolean;\n  shouldRenderWhileLoading: boolean;\n  providerWithCustomCheckout?: string;\n  isFloatingLabelEnabled?: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  loadShippingAddressFields(): Promise<CheckoutSelectors>;\n  loadBillingAddressFields(): Promise<CheckoutSelectors>;\n  loadShippingOptions(): Promise<CheckoutSelectors>;\n  signOut(options?: CustomerRequestOptions): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n  updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n  isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n  constructor(props: ShippingProps & WithCheckoutShippingProps) {\n    super(props);\n\n    this.state = {\n      isInitializing: true,\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    const {\n      loadShippingAddressFields,\n      loadBillingAddressFields,\n      loadShippingOptions,\n      onReady = noop,\n      onUnhandledError = noop,\n    } = this.props;\n\n    try {\n      await Promise.all([\n        loadShippingAddressFields(),\n        loadShippingOptions(),\n        loadBillingAddressFields(),\n      ]);\n\n      onReady();\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isInitializing: false });\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      isBillingSameAsShipping,\n      isGuest,\n      shouldShowMultiShipping,\n      customer,\n      updateShippingAddress,\n      initializeShippingMethod,\n      deinitializeShippingMethod,\n      isMultiShippingMode,\n      step,\n      isFloatingLabelEnabled,\n      shouldRenderStripeForm,\n      shouldRenderWhileLoading,\n      ...shippingFormProps\n    } = this.props;\n\n    const { isInitializing } = this.state;\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n        <div className=\"checkout-form\">\n          <ShippingHeader\n            isGuest={isGuest}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingChange={this.handleMultiShippingModeSwitch}\n            shouldShowMultiShipping={shouldShowMultiShipping}\n          />\n          <ShippingForm\n            {...shippingFormProps}\n            addresses={customer.addresses}\n            deinitialize={deinitializeShippingMethod}\n            initialize={initializeShippingMethod}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingSubmit={this.handleMultiShippingSubmit}\n            onSingleShippingSubmit={this.handleSingleShippingSubmit}\n            onUseNewAddress={this.handleUseNewAddress}\n            shouldShowSaveAddress={!isGuest}\n            updateAddress={updateShippingAddress}\n          />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleMultiShippingModeSwitch: () => void = async () => {\n    const {\n      consignments,\n      isMultiShippingMode,\n      onToggleMultiShipping = noop,\n      onUnhandledError = noop,\n      updateShippingAddress,\n    } = this.props;\n\n    if (isMultiShippingMode && consignments.length > 1) {\n      this.setState({ isInitializing: true });\n\n      try {\n        // Collapse all consignments into one\n        await updateShippingAddress(consignments[0].shippingAddress);\n      } catch (error) {\n        onUnhandledError(error);\n      } finally {\n        this.setState({ isInitializing: false });\n      }\n    }\n\n    onToggleMultiShipping();\n  };\n\n  private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n    billingSameAsShipping,\n    shippingAddress: addressValues,\n    orderComment,\n  }) => {\n    const {\n      customerMessage,\n      updateCheckout,\n      updateShippingAddress,\n      updateBillingAddress,\n      navigateNextStep,\n      onUnhandledError,\n      shippingAddress,\n      billingAddress,\n      methodId,\n    } = this.props;\n\n    const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n    if (\n      !isEqualAddress(updatedShippingAddress, shippingAddress) ||\n      shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress\n    ) {\n      promises.push(updateShippingAddress(updatedShippingAddress || {}));\n    }\n\n    if (\n      billingSameAsShipping &&\n      updatedShippingAddress &&\n      !isEqualAddress(updatedShippingAddress, billingAddress) &&\n      !hasRemoteBilling\n    ) {\n      promises.push(updateBillingAddress(updatedShippingAddress));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep(billingSameAsShipping);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n\n  private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n    const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n    return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n  };\n\n  private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n    address,\n    itemId,\n  ) => {\n    const { unassignItem, onUnhandledError } = this.props;\n\n    try {\n      await unassignItem({\n        address,\n        lineItems: [\n          {\n            quantity: 1,\n            itemId,\n          },\n        ],\n      });\n\n      location.href = '/account.php?action=add_shipping_address&from=checkout';\n    } catch (error) {\n      if (error instanceof UnassignItemError) {\n        onUnhandledError(new UnassignItemError(error));\n      }\n    }\n  };\n\n  private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n    orderComment,\n  }) => {\n    const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n    try {\n      if (customerMessage !== orderComment) {\n        await updateCheckout({ customerMessage: orderComment });\n      }\n\n      navigateNextStep(false);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n  ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n  ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n  (deleteConsignment, consignments) => async () => {\n    if (!consignments || !consignments.length) {\n      return;\n    }\n\n    const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n    return data.getShippingAddress();\n  },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n  const {\n    data: {\n      getCart,\n      getCheckout,\n      getConfig,\n      getCustomer,\n      getConsignments,\n      getShippingAddress,\n      getBillingAddress,\n      getShippingAddressFields,\n      getShippingCountries,\n    },\n    statuses: {\n      isShippingStepPending,\n      isSelectingShippingOption,\n      isLoadingShippingOptions,\n      isUpdatingConsignment,\n      isCreatingConsignments,\n      isCreatingCustomerAddress,\n      isLoadingShippingCountries,\n      isUpdatingBillingAddress,\n      isUpdatingCheckout,\n    },\n  } = checkoutState;\n\n  const checkout = getCheckout();\n  const config = getConfig();\n  const consignments = getConsignments() || [];\n  const customer = getCustomer();\n  const cart = getCart();\n\n  if (!checkout || !config || !customer || !cart) {\n    return null;\n  }\n\n  const {\n    checkoutSettings: { enableOrderComments, features, hasMultiShippingEnabled, googleMapsApiKey },\n  } = config;\n\n  const methodId = getShippingMethodId(checkout, config);\n  const shippableItemsCount = getShippableItemsCount(cart);\n  const isLoading =\n    isLoadingShippingOptions() ||\n    isSelectingShippingOption() ||\n    isUpdatingConsignment() ||\n    isCreatingConsignments() ||\n    isUpdatingBillingAddress() ||\n    isUpdatingCheckout() ||\n    isCreatingCustomerAddress();\n  const shouldShowMultiShipping = hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  const shippingAddress =\n    !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n  const providerWithCustomCheckout = getProviderWithCustomCheckout(\n    config.checkoutSettings.providerWithCustomCheckout,\n  );\n\n  return {\n    assignItem: checkoutService.assignItemsToAddress,\n    billingAddress: getBillingAddress(),\n    cart,\n    consignments,\n    countries: getShippingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    createCustomerAddress: checkoutService.createCustomerAddress,\n    deinitializeShippingMethod: checkoutService.deinitializeShipping,\n    deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n    getFields: getShippingAddressFields,\n    googleMapsApiKey,\n    initializeShippingMethod: checkoutService.initializeShipping,\n    isGuest: customer.isGuest,\n    isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n    isLoading,\n    isShippingStepPending: isShippingStepPending(),\n    loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n    loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n    loadShippingOptions: checkoutService.loadShippingOptions,\n    methodId,\n    providerWithCustomCheckout,\n    shippingAddress,\n    shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n    shouldShowMultiShipping,\n    shouldShowOrderComments: enableOrderComments,\n    signOut: checkoutService.signOutCustomer,\n    unassignItem: checkoutService.unassignItemsToAddress,\n    updateBillingAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    updateShippingAddress: checkoutService.updateShippingAddress,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    shouldRenderStripeForm:\n      providerWithCustomCheckout === PaymentMethodId.StripeUPE &&\n      shouldUseStripeLinkByMinimumAmount(cart),\n  };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","useEffect","current","displayName","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","shouldShowOrderComments","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","field","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","onAddressSelect","PayPalFastlaneShippingAddress","nameList","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","console","log","newAddress","index","checked","event","fetch","headers","Accept","body","JSON","stringify","first_name","Math","floor","random","last_name","state_or_province","postal_code","country_code","address_type","then","r","json","window","location","reload","catch","e","handleUpdateCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","Boolean","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","shouldUseStripeLinkByMinimumAmount","Shipping"],"sourceRoot":""}