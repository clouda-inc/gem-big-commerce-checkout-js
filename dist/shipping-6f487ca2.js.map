{"version":3,"file":"shipping-6f487ca2.js","mappings":"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","sources":["webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/Extension.tsx","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts"],"sourcesContent":["import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\n\nexport enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n    ShippingSelectedShippingMethod = 'extension-region-shipping-selectedshippingmethod',\n    SummaryAfter = 'extension-region-summary-after',\n    SummaryLastItemAfter = 'extension-region-summary-lastitem-after',\n}\n\nexport const extensionRegionToContainerMap: Record<ExtensionRegion, ExtensionRegionContainer> = {\n    [ExtensionRegion.ShippingShippingAddressFormBefore]:\n        ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n    [ExtensionRegion.ShippingShippingAddressFormAfter]:\n        ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n    [ExtensionRegion.ShippingSelectedShippingMethod]:\n        ExtensionRegionContainer.ShippingSelectedShippingMethod,\n    [ExtensionRegion.SummaryAfter]: ExtensionRegionContainer.SummaryAfter,\n    [ExtensionRegion.SummaryLastItemAfter]: ExtensionRegionContainer.SummaryLastItemAfter,\n};\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { extensionRegionToContainerMap } from './ExtensionRegionContainer';\nimport { useExtensions } from './useExtensions';\n\ninterface ExtensionProps {\n    region: ExtensionRegion;\n}\n\nexport const Extension = ({ region }: ExtensionProps): React.JSX.Element | null => {\n    const {\n        checkoutState: {\n            data: { getExtensions, getConfig, getCheckout },\n        },\n    } = useCheckout();\n    const extensions = getExtensions();\n    const config = getConfig();\n    const checkout = getCheckout();\n    const { extensionService } = useExtensions();\n    const isRegionEnabled =\n        extensions && config && checkout && extensionService.isRegionEnabled(region);\n    const containerId = extensionRegionToContainerMap[region];\n\n    useEffect(() => {\n        if (isRegionEnabled) {\n            void extensionService.renderExtension(containerId, region);\n\n            return () => {\n                extensionService.removeListeners(region);\n            };\n        }\n    }, [containerId, extensionService, isRegionEnabled, region]);\n\n    if (isRegionEnabled) {\n        return <div id={containerId} />;\n    }\n\n    return null;\n};\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import {\n    Address,\n    AddressRequestBody,\n    BillingAddress,\n    CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.indexOf('country') >= 0);\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            defaultHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={defaultHighlightedIndex}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps(), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n  getAddressFormFieldInputId,\n  getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n  fieldName?: string;\n  countryCode?: string;\n  countriesWithAutocomplete?: string[];\n  countries?: Country[];\n  formFields: FormField[];\n  googleMapsApiKey?: string;\n  shouldShowSaveAddress?: boolean;\n  isFloatingLabelEnabled?: boolean;\n  onAutocompleteSelect?(address: Partial<Address>): void;\n  onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n  onChange?(fieldName: string, value: string | string[]): void;\n  setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n  address1: 'address.address_line_1_label',\n  address2: 'address.address_line_2_label',\n  city: 'address.city_label',\n  company: 'address.company_name_label',\n  countryCode: 'address.country_label',\n  firstName: 'address.first_name_label',\n  lastName: 'address.last_name_label',\n  phone: 'address.phone_number_label',\n  postalCode: 'address.postal_code_label',\n  stateOrProvince: 'address.state_label',\n  stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n  address1: 'address-line1',\n  address2: 'address-line2',\n  city: 'address-level2',\n  company: 'organization',\n  countryCode: 'country',\n  firstName: 'given-name',\n  lastName: 'family-name',\n  phone: 'tel',\n  postalCode: 'postal-code',\n  stateOrProvince: 'address-level1',\n  stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n  countryCode: 'address.select_country_action',\n  stateOrProvince: 'address.select_state_action',\n  stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n  private containerRef: RefObject<HTMLElement> = createRef();\n  private nextElement?: HTMLElement | null;\n\n  private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n    memoize((name) => (value) => {\n      this.syncNonFormikValue(name, value);\n    });\n\n  componentDidMount(): void {\n    const { current } = this.containerRef;\n\n    if (current) {\n      this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      formFields,\n      fieldName,\n      countriesWithAutocomplete,\n      countryCode,\n      googleMapsApiKey,\n      onAutocompleteToggle,\n      shouldShowSaveAddress,\n      isFloatingLabelEnabled,\n    } = this.props;\n\n    return (\n      <>\n        <Fieldset>\n          <div className=\"checkout-address\" ref={this.containerRef as RefObject<HTMLDivElement>}>\n            {formFields.map((field) => {\n              const addressFieldName = field.name;\n              const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n              if (\n                addressFieldName === 'address1' &&\n                googleMapsApiKey &&\n                countriesWithAutocomplete\n              ) {\n                return (\n                  <GoogleAutocompleteFormField\n                    apiKey={googleMapsApiKey}\n                    countryCode={countryCode}\n                    field={field}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    key={field.id}\n                    nextElement={this.nextElement || undefined}\n                    onChange={this.handleAutocompleteChange}\n                    onSelect={this.handleAutocompleteSelect}\n                    onToggleOpen={onAutocompleteToggle}\n                    parentFieldName={fieldName}\n                    supportedCountries={countriesWithAutocomplete}\n                  />\n                );\n              }\n\n              return (\n                <DynamicFormField\n                  autocomplete={AUTOCOMPLETE[field.name]}\n                  extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                    addressFieldName,\n                  )}`}\n                  field={field}\n                  inputId={getAddressFormFieldInputId(addressFieldName)}\n                  // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                  isFloatingLabelEnabled={isFloatingLabelEnabled}\n                  key={`${field.id}-${field.name}`}\n                  label={field.custom ? field.label : <TranslatedString id={LABEL[field.name]} />}\n                  onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                  parentFieldName={\n                    field.custom\n                      ? fieldName\n                        ? `${fieldName}.customFields`\n                        : 'customFields'\n                      : fieldName\n                  }\n                  placeholder={this.getPlaceholderValue(field, translatedPlaceholderId)}\n                />\n              );\n            })}\n          </div>\n        </Fieldset>\n        {shouldShowSaveAddress && (\n          <CheckboxFormField\n            labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n            name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n          />\n        )}\n      </>\n    );\n  }\n\n  private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n    const { language } = this.props;\n\n    if (field.default && field.fieldType !== 'dropdown') {\n      return field.default;\n    }\n\n    return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n  }\n\n  private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n    if (!isOpen) {\n      this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n    }\n  };\n\n  private handleAutocompleteSelect: (\n    place: google.maps.places.PlaceResult,\n    item: AutocompleteItem,\n  ) => void = (place, { value: autocompleteValue }) => {\n    const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n    const address = mapToAddress(place, countries);\n\n    forIn(address, (value, fieldName) => {\n      setFieldValue(fieldName, value as string);\n      onChange(fieldName, value as string);\n    });\n\n    if (autocompleteValue) {\n      this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n    }\n  };\n\n  // because autocomplete state is controlled by Downshift, we need to manually keep formik\n  // value in sync when autocomplete value changes\n  private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n    fieldName,\n    value,\n  ) => {\n    const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n    const dateFormFieldNames = formFields\n      .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\n      .map((field) => field.name);\n\n    if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n      setFieldValue(fieldName, value);\n    }\n\n    onChange(fieldName, value);\n  };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n  PoweredByPayPalFastlaneLabel,\n  usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n  addresses: CustomerAddress[];\n  selectedAddress?: Address;\n  type: AddressType;\n  onSelectAddress(address: Address): void;\n  onUseNewAddress(currentAddress?: Address): void;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n  addresses,\n  onSelectAddress,\n  onUseNewAddress,\n  selectedAddress,\n  type,\n}) => (\n  <div className=\"address-with-selector-container\">\n    <div>\n      <div\n        className=\"add-new-address\"\n        data-test=\"add-new-address\"\n        onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n      >\n        <TranslatedString id=\"address.enter_address_action\" />\n      </div>\n    </div>\n    <ul className=\"address-with-selector-list-container\">\n      {addresses.map((address) => (\n        <div\n          className=\"address-with-selector-container\"\n          data-test=\"address-select-option\"\n          key={address.id}\n        >\n          <div className=\"address-with-selector-container-inner\">\n            <div className=\"address-with-selector\">\n              <input\n                checked={!!isEqualAddress(selectedAddress, address)}\n                className=\"address-with-selector-input\"\n                onClick={preventDefault(() => onSelectAddress(address))}\n                type=\"radio\"\n              />\n            </div>\n            <StaticAddress address={address} type={type} />\n          </div>\n        </div>\n      ))}\n    </ul>\n  </div>\n);\n\nconst AddressSelect = ({\n  addresses,\n  selectedAddress,\n  type,\n  onSelectAddress,\n  onUseNewAddress,\n}: AddressSelectProps) => {\n  const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n  const handleSelectAddress = (newAddress: Address) => {\n    if (!isEqualAddress(selectedAddress, newAddress)) {\n      onSelectAddress(newAddress);\n    }\n  };\n\n  const handleUseNewAddress = () => {\n    onUseNewAddress(selectedAddress);\n  };\n\n  return (\n    <div className=\"form-field\">\n      <div className=\"dropdown--select\">\n        <AddressSelectMenu\n          addresses={addresses}\n          onSelectAddress={handleSelectAddress}\n          onUseNewAddress={handleUseNewAddress}\n          selectedAddress={selectedAddress}\n          type={type}\n        />\n      </div>\n\n      {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n    </div>\n  );\n};\n\nexport default memo(AddressSelect);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n  WithCheckoutShippingOptionsProps &\n  AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n  ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n  private unsubscribe?: () => void;\n\n  componentDidMount(): void {\n    const { subscribeToConsignments } = this.props;\n\n    this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n  }\n\n  componentDidUpdate(): void {\n    const { analyticsTracker, consignments, shouldShowShippingOptions } = this.props;\n\n    if (consignments?.length && shouldShowShippingOptions) {\n      analyticsTracker.showShippingMethods();\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      consignments,\n      isMultiShippingMode,\n      selectShippingOption,\n      isLoading,\n      shouldShowShippingOptions,\n      invalidShippingMessage,\n      methodId,\n    } = this.props;\n\n    if (!consignments?.length || !shouldShowShippingOptions) {\n      return (\n        <ChecklistSkeleton\n          additionalClassName=\"shippingOptions-skeleton\"\n          isLoading={isLoading()}\n          rows={2}\n        >\n          {this.renderNoShippingOptions(\n            <TranslatedString\n              id={\n                methodId || isMultiShippingMode\n                  ? 'shipping.select_shipping_address_text'\n                  : 'shipping.enter_shipping_address_text'\n              }\n            />,\n          )}\n        </ChecklistSkeleton>\n      );\n    }\n\n    return (\n      <>\n        {consignments.map((consignment) => (\n          <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n            {isMultiShippingMode && this.renderConsignment(consignment)}\n\n            <ShippingOptionsList\n              consignmentId={consignment.id}\n              inputName={getRadioInputName(consignment.id)}\n              isLoading={isLoading(consignment.id)}\n              isMultiShippingMode={isMultiShippingMode}\n              onSelectedOption={selectShippingOption}\n              selectedShippingOptionId={\n                consignment.selectedShippingOption && consignment.selectedShippingOption.id\n              }\n              shippingOptions={consignment.availableShippingOptions}\n            />\n\n            {(!consignment.availableShippingOptions ||\n              !consignment.availableShippingOptions.length) && (\n              <ChecklistSkeleton\n                additionalClassName=\"shippingOptions-skeleton\"\n                isLoading={isLoading(consignment.id)}\n                rows={2}\n              >\n                {this.renderNoShippingOptions(invalidShippingMessage)}\n              </ChecklistSkeleton>\n            )}\n          </div>\n        ))}\n      </>\n    );\n  }\n\n  private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n    const { selectShippingOption, setFieldValue } = this.props;\n\n    const consignment = (data.getConsignments() || []).find(\n      ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n        !selectedShippingOption && shippingOptions,\n    );\n\n    if (!consignment || !consignment.availableShippingOptions) {\n      return;\n    }\n\n    const { availableShippingOptions, id } = consignment;\n    const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n    const singleShippingOption =\n      availableShippingOptions.length === 1 && availableShippingOptions[0];\n    const defaultShippingOption = recommendedOption || singleShippingOption;\n\n    if (!defaultShippingOption) {\n      return;\n    }\n\n    await selectShippingOption(id, defaultShippingOption.id);\n    setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n  };\n\n  private renderNoShippingOptions(message: ReactNode): ReactNode {\n    return (\n      <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n        <p\n          aria-live=\"polite\"\n          className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n          role=\"alert\"\n        >\n          {message}\n        </p>\n      </div>\n    );\n  }\n\n  private renderConsignment(consignment: Consignment): ReactNode {\n    const { cart } = this.props;\n\n    return (\n      <div className=\"staticConsignment\">\n        <strong>\n          <TranslatedString id=\"shipping.shipping_address_heading\" />\n        </strong>\n\n        <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n        <StaticConsignmentItemList cart={cart} consignment={consignment} />\n      </div>\n    );\n  }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n  return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n  shippingOptionIds: {\n    [shippingOptionIds: string]: string;\n  };\n}\n\nexport default withAnalytics(\n  withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n      const shippingOptionIds: { [id: string]: string } = {};\n\n      (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n          ? consignment.selectedShippingOption.id\n          : '';\n      });\n\n      return { shippingOptionIds };\n    },\n  })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n  isInitialValueLoaded: boolean;\n  isMultiShippingMode: boolean;\n  isUpdatingAddress?: boolean;\n  shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n  invalidShippingMessage: string;\n  methodId?: string;\n  consignments?: Consignment[];\n  cart: Cart;\n  isSelectingShippingOption(consignmentId?: string): boolean;\n  subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n  selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n  isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n  ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n  (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n    return subscribe(subscriber, ({ data }) => data.getConsignments());\n  },\n);\n\nconst isLoadingSelector = createSelector(\n  (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n  ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n  ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n  ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n  ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n  (\n    isUpdatingAddress,\n    isLoadingShippingOptions,\n    isSelectingShippingOption,\n    isUpdatingConsignment,\n    isCreatingConsignments,\n  ) => {\n    return (consignmentId?: string) => {\n      return (\n        isUpdatingAddress ||\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption(consignmentId) ||\n        isUpdatingConsignment(consignmentId) ||\n        isCreatingConsignments()\n      );\n    };\n  },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n  if (unsortedConsignments.length < 2) {\n    return unsortedConsignments;\n  }\n\n  const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n  const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n  return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n  { checkoutService, checkoutState }: CheckoutContextProps,\n  props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n  const {\n    data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n    statuses: { isSelectingShippingOption },\n  } = checkoutState;\n\n  const customer = getCustomer();\n  const cart = getCart();\n  const config = getConfig();\n  const checkout = getCheckout();\n\n  if (!config || !checkout || !customer || !cart) {\n    return null;\n  }\n\n  const consignments = sortConsignments(cart, getConsignments() || []);\n  const methodId = getShippingMethodId(checkout, config);\n  const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n  return {\n    cart,\n    consignments,\n    invalidShippingMessage: shippingQuoteFailedMessage,\n    isLoading: isLoadingSelector(checkoutState, props),\n    isSelectingShippingOption,\n    methodId,\n    selectShippingOption: checkoutService.selectConsignmentShippingOption,\n    subscribeToConsignments: subscribeToConsignmentsSelector({\n      checkoutService,\n      checkoutState,\n    }),\n  };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\n// import { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  shouldShowOrderComments: boolean;\n  shouldShowShippingOptions?: boolean;\n  shouldDisableSubmit: boolean;\n  isInitialValueLoaded: boolean;\n  isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n  cartHasChanged,\n  isMultiShippingMode,\n  // shouldShowOrderComments,\n  shouldShowShippingOptions = true,\n  shouldDisableSubmit,\n  isInitialValueLoaded,\n  isLoading,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n      <Fieldset\n        id=\"checkout-shipping-options\"\n        legend={\n          <>\n            <Legend>\n              <TranslatedString id=\"shipping.shipping_method_label\" />\n            </Legend>\n\n            {cartHasChanged && (\n              <Alert type={AlertType.Error}>\n                <strong>\n                  <TranslatedString id=\"shipping.cart_change_error\" />\n                </strong>\n              </Alert>\n            )}\n          </>\n        }\n      >\n        <ShippingOptions\n          isInitialValueLoaded={isInitialValueLoaded}\n          isMultiShippingMode={isMultiShippingMode}\n          isUpdatingAddress={isLoading}\n          shouldShowShippingOptions={shouldShowShippingOptions}\n        />\n      </Fieldset>\n\n      {/* {shouldShowOrderComments && <OrderComments />} */}\n\n      <div className=\"form-actions\">\n        <Button\n          disabled={shouldDisableSubmit}\n          id=\"checkout-shipping-continue\"\n          isLoading={isLoading}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ShippingFormFooter;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutSelectors,\n  CheckoutStoreSelector,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n  TranslatedLink,\n  TranslatedString,\n  withLanguage,\n  WithLanguageProps,\n} from '@bigcommerce/checkout/locale';\n\nimport {\n  AddressFormModal,\n  AddressFormValues,\n  isValidAddress,\n  mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\nimport { withFormikExtended } from '../common/form';\n\nexport interface MultiShippingFormProps {\n  addresses: CustomerAddress[];\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  customerMessage: string;\n  isGuest: boolean;\n  isLoading: boolean;\n  shouldShowOrderComments: boolean;\n  defaultCountryCode?: string;\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): void;\n  onSignIn(): void;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: MultiShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n  key: string;\n  itemId: string;\n}\n\nexport interface MultiShippingFormState {\n  items: ShippableItem[];\n  itemAddingAddress?: ShippableItemId;\n  createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n  MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n  MultiShippingFormState\n> {\n  static getDerivedStateFromProps(\n    { cart, consignments }: MultiShippingFormProps,\n    state: MultiShippingFormState,\n  ) {\n    if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n      return { items: getShippableLineItems(cart, consignments) };\n    }\n\n    return null;\n  }\n\n  state: MultiShippingFormState = { items: [] };\n\n  render(): ReactNode {\n    const {\n      addresses,\n      consignments,\n      cart,\n      isGuest,\n      onSignIn,\n      onCreateAccount,\n      cartHasChanged,\n      shouldShowOrderComments,\n      isInitialValueLoaded,\n      isLoading,\n      getFields,\n      defaultCountryCode,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n    } = this.props;\n\n    const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n    if (isGuest) {\n      return (\n        <div className=\"checkout-step-info\">\n          <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n          <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={preventDefault(onSignIn)}>\n            <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n          </a>{' '}\n          <TranslatedLink id=\"shipping.multishipping_guest_create\" onClick={onCreateAccount} />\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <ErrorModal\n          error={createCustomerAddressError}\n          message={\n            <>\n              <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n              <TranslatedString id=\"customer.create_address_error\" />\n            </>\n          }\n          onClose={this.handleCloseErrorModal}\n          shouldShowErrorCode={false}\n        />\n        <AddressFormModal\n          countries={countries}\n          countriesWithAutocomplete={countriesWithAutocomplete}\n          defaultCountryCode={defaultCountryCode}\n          getFields={getFields}\n          googleMapsApiKey={googleMapsApiKey}\n          isFloatingLabelEnabled={isFloatingLabelEnabled}\n          isLoading={isLoading}\n          isOpen={!!itemAddingAddress}\n          onRequestClose={this.handleCloseAddAddressForm}\n          onSaveAddress={this.handleSaveAddress}\n        />\n\n        <Form>\n          <ul className=\"consignmentList\">\n            {items.map((item) => (\n              <li key={item.key}>\n                <ItemAddressSelect\n                  addresses={addresses}\n                  item={item}\n                  onSelectAddress={this.handleSelectAddress}\n                  onUseNewAddress={this.handleUseNewAddress}\n                />\n              </li>\n            ))}\n          </ul>\n\n          <ShippingFormFooter\n            cartHasChanged={cartHasChanged}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={true}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowShippingOptions={!hasUnassignedLineItems(consignments, cart.lineItems)}\n          />\n        </Form>\n      </>\n    );\n  }\n\n  private handleCloseErrorModal: () => void = () => {\n    this.setState({ createCustomerAddressError: undefined });\n  };\n\n  private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n    const { createCustomerAddress } = this.props;\n    const { itemAddingAddress } = this.state;\n\n    if (!itemAddingAddress) {\n      return;\n    }\n\n    const shippingAddress = mapAddressFromFormValues(address);\n\n    await this.handleSelectAddress(\n      shippingAddress,\n      itemAddingAddress.itemId,\n      itemAddingAddress.key,\n    );\n\n    try {\n      await createCustomerAddress(shippingAddress);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.setState({ createCustomerAddressError: error });\n      }\n    }\n\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleUseNewAddress: (itemId: string, itemKey: string) => void = (itemId, itemKey) => {\n    this.setState({\n      itemAddingAddress: {\n        key: itemKey,\n        itemId,\n      },\n    });\n  };\n\n  private handleCloseAddAddressForm: () => void = () => {\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleSelectAddress: (\n    address: Address,\n    itemId: string,\n    itemKey: string,\n  ) => Promise<void> = async (address, itemId, itemKey) => {\n    const { assignItem, onUnhandledError, getFields } = this.props;\n\n    if (!isValidAddress(address, getFields(address.countryCode))) {\n      return onUnhandledError(new AssignItemInvalidAddressError());\n    }\n\n    try {\n      const { data } = await assignItem({\n        address,\n        lineItems: [\n          {\n            itemId,\n            quantity: 1,\n          },\n        ],\n      });\n\n      this.syncItems(itemKey, address, data);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(new AssignItemFailedError(error));\n      }\n    }\n  };\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments } = this.props;\n\n    return isLoading || !hasSelectedShippingOptions(consignments);\n  };\n\n  private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n    key,\n    address,\n    data,\n  ) => {\n    const { items: currentItems } = this.state;\n    const items = updateShippableItems(\n      currentItems,\n      {\n        updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n        address,\n      },\n      {\n        cart: data.getCart(),\n        consignments: data.getConsignments(),\n      },\n    );\n\n    if (items) {\n      this.setState({ items });\n    }\n  };\n}\n\nexport interface MultiShippingFormValues {\n  orderComment: string;\n}\n\nexport default withLanguage(\n  withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n      orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n  })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","import {\n  Address,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n// import { Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressForm,\n  // AddressSelect,\n  AddressType,\n  isEqualAddress,\n  isValidCustomerAddress,\n  StaticAddress,\n} from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n// import { Modal } from '../ui/modal';\n\n// import ShippingAddressEditForm from './editShippingAddress';\n// import { getRandomName } from './editShippingAddress/util';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nimport './ShippingAddressForm.scss';\n\nexport interface ShippingAddressFormProps {\n  addresses: CustomerAddress[];\n  address?: Address;\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  formFields: FormField[];\n  shouldShowSaveAddress?: boolean;\n  isFloatingLabelEnabled?: boolean;\n  onUseNewAddress(currentAddress?: Address): void;\n  onFieldChange(fieldName: string, value: string): void;\n  onAddressSelect(address: Address): void;\n  updateShippingAddress(address: Address, includeShippingOptions: boolean): void;\n}\n\ninterface ShippingEditFormState {\n  editAddress: CustomerAddress;\n  showEditAddressModal: boolean;\n}\n\nconst addressFieldName = 'shippingAddress';\nconst token = 'q64h3xndgjcrd3vn1iggj9iypp2tyzi';\n\nclass ShippingAddressForm extends Component<\n  ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>,\n  ShippingEditFormState\n> {\n  constructor(props: ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>) {\n    super(props);\n    this.state = {\n      editAddress: {} as CustomerAddress,\n      showEditAddressModal: false,\n    };\n  }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      address: shippingAddress,\n      onAddressSelect,\n      onUseNewAddress,\n      updateShippingAddress,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      formFields,\n      isLoading,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n      formik: {\n        values: { shippingAddress: formAddress },\n      },\n    } = this.props;\n\n    const { editAddress, showEditAddressModal } = this.state;\n\n    const hasAddresses = addresses && addresses.length > 0;\n    const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n    const handleUseNewAddress = () => {\n      onUseNewAddress(shippingAddress);\n    };\n\n    const handleSelectAddress = (newAddress: Address) => {\n      if (!isEqualAddress(shippingAddress, newAddress)) {\n        onAddressSelect(newAddress);\n      }\n    };\n\n    const handleEditAddress = (address: CustomerAddress) => {\n      this.setState({ editAddress: address, showEditAddressModal: true });\n    };\n\n    const handleCloseEditAddressModal = () => {\n      this.setState({ showEditAddressModal: false });\n    };\n\n    const onSubmit = (e: any) => {\n      e.preventDefault();\n\n      const editedaddress = {\n        id: editAddress?.id,\n        first_name: editAddress?.firstName,\n        last_name: editAddress?.lastName,\n        address1: editAddress?.address1,\n        address2: editAddress?.address2,\n        city: editAddress?.city,\n        state_or_province: editAddress?.stateOrProvince,\n        postal_code: editAddress?.postalCode,\n        country_code: editAddress?.countryCode,\n        phone: editAddress?.phone,\n        address_type: editAddress?.type,\n      };\n\n      fetch('https://api.bigcommerce.com/stores/qxtizk9ym4/v3/customers/addresses', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'X-Auth-Token': token,\n        },\n        body: JSON.stringify([{ ...editedaddress }]),\n      })\n        .then((r) => r.json())\n        .then((r) => {\n          handleCloseEditAddressModal();\n          updateShippingAddress(\n            {\n              firstName: r.data[0].first_name,\n              lastName: r.data[0].last_name,\n              address1: r.data[0].address1,\n              address2: r.data[0].address2,\n              city: r.data[0].city,\n              stateOrProvince: r.data[0].state_or_province,\n              postalCode: r.data[0].postal_code,\n              countryCode: r.data[0].country_code,\n              phone: r.data[0].phone,\n              country: r.data[0].country,\n              company: r.data[0].company,\n              stateOrProvinceCode: r.data[0].state_or_province_code,\n              customFields: [],\n            },\n            true,\n          );\n          // handleSelectAddress({\n          //   firstName: r.data[0].first_name,\n          //   lastName: r.data[0].last_name,\n          //   address1: r.data[0].address1,\n          //   address2: r.data[0].address2,\n          //   city: r.data[0].city,\n          //   stateOrProvince: r.data[0].state_or_province,\n          //   postalCode: r.data[0].postal_code,\n          //   countryCode: r.data[0].country_code,\n          //   phone: r.data[0].phone,\n          //   country: r.data[0].country,\n          //   company: r.data[0].company,\n          //   stateOrProvinceCode: r.data[0].state_or_province_code,\n          //   customFields: [],\n          // });\n          // window.location.reload();\n        })\n        .catch((e) => {\n          // eslint-disable-next-line no-console\n          console.error('Error : ', e);\n        });\n    };\n\n    return (\n      <Fieldset id=\"checkoutShippingAddress\">\n        {!showEditAddressModal && hasAddresses && (\n          <Fieldset id=\"shippingAddresses\">\n            <LoadingOverlay isLoading={isLoading}>\n              <div className=\"shipping-address-list-wrapper\">\n                <div\n                  className=\"add-new-address\"\n                  data-test=\"add-new-address\"\n                  onClick={handleUseNewAddress}\n                >\n                  <TranslatedString id=\"address.enter_address_action\" />\n                </div>\n                <div className=\"shipping-address-list-container\">\n                  {addresses &&\n                    addresses?.map((address, index: number) => {\n                      return (\n                        <div className=\"shipping-address\" key={index}>\n                          <div className=\"shipping-address-with-selector\">\n                            <div>\n                              <input\n                                checked={!!isEqualAddress(shippingAddress, address)}\n                                className=\"shipping-address-with-selector-input\"\n                                onClick={() => handleSelectAddress(address)}\n                                type=\"radio\"\n                              />\n                            </div>\n                            <StaticAddress address={address} type={AddressType.Shipping} />\n                          </div>\n                          <button\n                            className=\"shipping-address-edit-button\"\n                            onClick={(event) => {\n                              event.preventDefault();\n                              // handleUpdateCustomerAddress(address);\n                              handleEditAddress(address);\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </div>\n                      );\n                    })}\n                </div>\n              </div>\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n        {!hasValidCustomerAddress && (\n          <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n            <AddressForm\n              countries={countries}\n              countriesWithAutocomplete={countriesWithAutocomplete}\n              countryCode={formAddress && formAddress.countryCode}\n              fieldName={addressFieldName}\n              formFields={formFields}\n              googleMapsApiKey={googleMapsApiKey}\n              isFloatingLabelEnabled={isFloatingLabelEnabled}\n              onAutocompleteToggle={this.handleAutocompleteToggle}\n              onChange={this.handleChange}\n              setFieldValue={this.setFieldValue}\n              shouldShowSaveAddress={shouldShowSaveAddress}\n            />\n          </LoadingOverlay>\n        )}\n        {showEditAddressModal && (\n          <div className=\"edit-shipping-address-form\">\n            <div className=\"edit-shipping-address-title\">Edit Shipping Address</div>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '1.875rem' }}>\n              <div className=\"form-field-name-container\">\n                <div className=\"form-field-first-name form-field\">\n                  <input\n                    className=\"form-field-first-name form-field-input\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, firstName: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.firstName}\n                  />\n                </div>\n                <div className=\"form-field-last-name form-field\">\n                  <input\n                    className=\"form-field-last-name form-field-input\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, lastName: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.lastName}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-address1 form-field\">\n                <input\n                  className=\"form-field-address1 form-field-input\"\n                  id=\"address1\"\n                  name=\"address1\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address1: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address1}\n                />\n              </div>\n              <div className=\"form-field-address2 form-field\">\n                <input\n                  className=\"form-field-address2 form-field-input\"\n                  id=\"address2\"\n                  name=\"address2\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address2: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address2}\n                />\n              </div>\n              <div className=\"form-field-country form-field\">\n                <input\n                  className=\"form-field-country form-field-input\"\n                  id=\"country\"\n                  name=\"country\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, country: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.country}\n                />\n              </div>\n              <div className=\"form-field-stateOrProvince-city-container\">\n                <div className=\"form-field-stateOrProvince form-field\">\n                  <input\n                    className=\"form-field-stateOrProvince form-field-input\"\n                    id=\"stateOrProvince\"\n                    name=\"stateOrProvince\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, stateOrProvince: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.stateOrProvince}\n                  />\n                </div>\n                <div className=\"form-field-city form-field\">\n                  <input\n                    className=\"form-field-city form-field-input\"\n                    id=\"city\"\n                    name=\"city\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, city: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress.city}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-postalCode-phone-container\">\n                <div className=\"form-field-postalCode form-field\">\n                  <input\n                    className=\"form-field-postalCode form-field-input\"\n                    id=\"postalCode\"\n                    name=\"postalCode\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, postalCode: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.postalCode}\n                  />\n                </div>\n                <div className=\"form-field-phone form-field\">\n                  <input\n                    className=\"form-field-phone form-field-input\"\n                    id=\"phone\"\n                    name=\"phone\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, phone: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress.phone}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-saveAddress-button\">\n                <button\n                  className=\"edit-shipping-address-cancel\"\n                  onClick={handleCloseEditAddressModal}\n                  type=\"button\"\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"edit-shipping-address-submit\"\n                  onClick={(e) => onSubmit(e)}\n                  type=\"submit\"\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </Fieldset>\n    );\n  }\n\n  private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n    fieldName,\n    fieldValue,\n  ) => {\n    const {\n      formik: { setFieldValue },\n      formFields,\n    } = this.props;\n\n    const customFormFieldNames = formFields\n      .filter((field) => field.custom)\n      .map((field) => field.name);\n\n    const formFieldName = customFormFieldNames.includes(fieldName)\n      ? `customFields.${fieldName}`\n      : fieldName;\n\n    setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n  };\n\n  private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    const { onFieldChange } = this.props;\n\n    onFieldChange(fieldName, value);\n  };\n\n  private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n    isOpen,\n    inputValue,\n  }) => {\n    const { onFieldChange } = this.props;\n\n    if (!isOpen) {\n      onFieldChange('address1', inputValue);\n    }\n  };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","import {\n  Address,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport {\n  isPayPalFastlaneMethod,\n  usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n  addresses: CustomerAddress[];\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  formFields: FormField[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  hasRequestedShippingOptions: boolean;\n  isFloatingLabelEnabled?: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onAddressSelect(address: Address): void;\n  onFieldChange(name: string, value: string): void;\n  onUnhandledError?(error: Error): void;\n  onUseNewAddress(): void;\n  updateShippingAddress(address: Address, includeShippingOptions: boolean): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n  const {\n    methodId,\n    formFields,\n    countries,\n    countriesWithAutocomplete,\n    consignments,\n    googleMapsApiKey,\n    onAddressSelect,\n    onFieldChange,\n    onUseNewAddress,\n    isLoading,\n    shippingAddress,\n    hasRequestedShippingOptions,\n    addresses,\n    shouldShowSaveAddress,\n    isFloatingLabelEnabled,\n    updateShippingAddress,\n  } = props;\n\n  const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n  const { setSubmitted } = useContext(FormContext);\n\n  const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    if (hasRequestedShippingOptions) {\n      setSubmitted(true);\n    }\n\n    onFieldChange(fieldName, value);\n  };\n\n  if (methodId === 'amazonpay' && shippingAddress) {\n    return <AmazonPayShippingAddress {...props} shippingAddress={shippingAddress} />;\n  }\n\n  if (\n    methodId &&\n    isPayPalFastlaneMethod(methodId) &&\n    shippingAddress &&\n    shouldShowPayPalFastlaneShippingForm\n  ) {\n    return (\n      <PayPalFastlaneShippingAddress\n        {...props}\n        methodId={methodId}\n        shippingAddress={shippingAddress}\n      />\n    );\n  }\n\n  return (\n    <ShippingAddressForm\n      address={shippingAddress}\n      addresses={addresses}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      formFields={formFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isLoading={isLoading}\n      onAddressSelect={onAddressSelect}\n      onFieldChange={handleFieldChange}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n      updateShippingAddress={updateShippingAddress}\n    />\n  );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isEqualAddress,\n  mapAddressFromFormValues,\n  mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\n// import BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nimport './SingleShippingForm.scss';\n\nexport interface SingleShippingFormProps {\n  addresses: CustomerAddress[];\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shippingAutosaveDelay?: number;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isResettingAddress: boolean;\n  isUpdatingShippingData: boolean;\n  hasRequestedShippingOptions: boolean;\n  // billingSameAsShipping: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n  const methodIdsWithoutCustomValidation: string[] = [\n    PaymentMethodId.BraintreeAcceleratedCheckout,\n    PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n  ];\n\n  return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isResettingAddress: false,\n    isUpdatingShippingData: false,\n    hasRequestedShippingOptions: false,\n    // billingSameAsShipping: localStorage.getItem('billingSameAsShipping') === 'true',\n  };\n\n  private debouncedUpdateAddress: any;\n\n  constructor(\n    props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n  ) {\n    super(props);\n\n    const { updateAddress } = this.props;\n\n    this.debouncedUpdateAddress = debounce(\n      async (address: Address, includeShippingOptions: boolean) => {\n        try {\n          await updateAddress(address, {\n            params: {\n              include: {\n                'consignments.availableShippingOptions': includeShippingOptions,\n              },\n            },\n          });\n\n          if (includeShippingOptions) {\n            this.setState({ hasRequestedShippingOptions: true });\n          }\n        } finally {\n          this.setState({ isUpdatingShippingData: false });\n        }\n      },\n      props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n    );\n  }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      onUnhandledError,\n      methodId,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      values: { shippingAddress: addressForm },\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n      // updateAddress,\n    } = this.props;\n\n    const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } = this.state;\n\n    // const PAYMENT_METHOD_VALID = ['amazonpay'];\n    // const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n    //   (method) => method === methodId,\n    // );\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <ShippingAddress\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            deinitialize={deinitialize}\n            formFields={this.getFields(addressForm && addressForm.countryCode)}\n            googleMapsApiKey={googleMapsApiKey}\n            hasRequestedShippingOptions={hasRequestedShippingOptions}\n            initialize={initialize}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isResettingAddress}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onAddressSelect={this.handleAddressSelect}\n            onFieldChange={this.handleFieldChange}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={this.onUseNewAddress}\n            shippingAddress={shippingAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            updateShippingAddress={this.debouncedUpdateAddress}\n          />\n          {/* {shouldShowBillingSameAsShipping && (\n            <div className=\"billing-same-as-shipping-container\">\n              <input\n                checked={this.state.billingSameAsShipping}\n                className=\"billing-same-as-shipping-input\"\n                data-test=\"billingSameAsShipping\"\n                id=\"sameAsBilling\"\n                name=\"billingSameAsShipping\"\n                onChange={(e) => {\n                  this.setState({ billingSameAsShipping: e.target.checked });\n                  localStorage.setItem('isBillingSameAsShipping', e.target.checked.toString());\n                }}\n                type=\"checkbox\"\n              />\n              <label className=\"billing-same-as-shipping-label\" htmlFor=\"sameAsBilling\">\n                Same as billing address\n              </label>\n            </div>\n          )} */}\n        </Fieldset>\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleFieldChange: (name: string) => void = async (name) => {\n    const { setFieldValue } = this.props;\n\n    if (name === 'countryCode') {\n      setFieldValue('shippingAddress.stateOrProvince', '');\n      setFieldValue('shippingAddress.stateOrProvinceCode', '');\n    }\n\n    // Enqueue the following code to run after Formik has run validation\n    await new Promise((resolve) => setTimeout(resolve));\n\n    const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n    const { hasRequestedShippingOptions } = this.state;\n\n    const { isValid } = this.props;\n\n    if (!isValid) {\n      return;\n    }\n\n    this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n  };\n\n  private updateAddressWithFormData(includeShippingOptions: boolean) {\n    const {\n      shippingAddress,\n      values: { shippingAddress: addressForm },\n    } = this.props;\n\n    const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n    if (Array.isArray(shippingAddress?.customFields)) {\n      includeShippingOptions =\n        !isEqual(shippingAddress?.customFields, updatedShippingAddress?.customFields) ||\n        includeShippingOptions;\n    }\n\n    if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n      return;\n    }\n\n    this.setState({ isUpdatingShippingData: true });\n    this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n  }\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private onUseNewAddress: () => void = async () => {\n    const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      const address = await deleteConsignments();\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(\n          this.getFields(address && address.countryCode),\n          address,\n        ),\n      });\n    } catch (e) {\n      onUnhandledError(e);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit({\n        ...values,\n        billingSameAsShipping: localStorage.getItem('isBillingSameAsShipping') === 'true',\n      });\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      shouldHaveCustomValidation(methodId)\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(SingleShippingForm),\n);\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect, useState } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n  addresses: CustomerAddress[];\n  billingAddress: Address;\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isBillingSameAsShipping: boolean;\n  isGuest: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  onMultiShippingSubmit(values: MultiShippingFormValues): void;\n  onSignIn(): void;\n  onSingleShippingSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n  addresses,\n  assignItem,\n  // billingAddress,\n  cart,\n  cartHasChanged,\n  createCustomerAddress,\n  consignments,\n  countries,\n  countriesWithAutocomplete,\n  onCreateAccount,\n  customerMessage,\n  deinitialize,\n  deleteConsignments,\n  getFields,\n  googleMapsApiKey,\n  initialize,\n  // isBillingSameAsShipping,\n  isGuest,\n  isLoading,\n  isMultiShippingMode,\n  methodId,\n  onMultiShippingSubmit,\n  onSignIn,\n  onSingleShippingSubmit,\n  onUnhandledError,\n  onUseNewAddress,\n  shippingAddress,\n  shouldShowOrderComments,\n  shouldShowSaveAddress,\n  signOut,\n  updateAddress,\n  isShippingStepPending,\n  isFloatingLabelEnabled,\n  isInitialValueLoaded,\n}: ShippingFormProps & WithLanguageProps) => {\n  // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses, shouldShowPayPalFastlaneShippingForm } =\n    usePayPalFastlaneAddress();\n\n  const shippingAddresses =\n    isPayPalFastlaneEnabled && isGuest ? paypalFastlaneAddresses : addresses;\n\n  const [isBillingSameAsShippingState, setIsBillingSameAsShippingState] = useState(\n    localStorage.getItem('isBillingSameAsShipping') === 'true',\n  );\n\n  useEffect(() => {\n    setIsBillingSameAsShippingState(localStorage.getItem('isBillingSameAsShipping') === 'true');\n  }, []);\n\n  useEffect(() => {\n    if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n      initialize({ methodId });\n    }\n  }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n  return isMultiShippingMode ? (\n    <MultiShippingForm\n      addresses={shippingAddresses}\n      assignItem={assignItem}\n      cart={cart}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      createCustomerAddress={createCustomerAddress}\n      customerMessage={customerMessage}\n      defaultCountryCode={shippingAddress?.countryCode}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isGuest={isGuest}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      onCreateAccount={onCreateAccount}\n      onSignIn={onSignIn}\n      onSubmit={onMultiShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n    />\n  ) : (\n    <SingleShippingForm\n      addresses={shippingAddresses}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      customerMessage={customerMessage}\n      deinitialize={deinitialize}\n      deleteConsignments={deleteConsignments}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      initialize={initialize}\n      // isBillingSameAsShipping={isBillingSameAsShipping}\n      isBillingSameAsShipping={isBillingSameAsShippingState}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      isMultiShippingMode={isMultiShippingMode}\n      isShippingStepPending={isShippingStepPending}\n      methodId={methodId}\n      onSubmit={onSingleShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      shippingAddress={shippingAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n      signOut={signOut}\n      updateAddress={updateAddress}\n    />\n  );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n// import { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n  isMultiShippingMode: boolean;\n  isGuest: boolean;\n  shouldShowMultiShipping: boolean;\n  onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n  isMultiShippingMode,\n  isGuest,\n  // onMultiShippingChange,\n  // shouldShowMultiShipping,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n      <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n          <TranslatedString\n            id={\n              isMultiShippingMode\n                ? isGuest\n                  ? 'shipping.multishipping_address_heading_guest'\n                  : 'shipping.multishipping_address_heading'\n                : 'shipping.shipping_address_heading'\n            }\n          />\n        </Legend>\n\n        {/** TODO: Uncomment to allow add multi shipping */}\n        {/* {shouldShowMultiShipping && (\n          <a\n            data-test=\"shipping-mode-toggle\"\n            href=\"#\"\n            onClick={preventDefault(onMultiShippingChange)}\n          >\n            <TranslatedString\n              id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n            />\n          </a>\n        )} */}\n      </div>\n    </>\n  );\n};\n\nexport default memo(ShippingHeader);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n  onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n  onChange,\n}) => {\n  const labelContent = useMemo(\n    () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n    [],\n  );\n\n  return (\n    <CheckboxFormField\n      id=\"sameAsBilling\"\n      labelContent={labelContent}\n      name=\"billingSameAsShipping\"\n      onChange={onChange}\n      testId=\"billingSameAsShipping\"\n    />\n  );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  customerMessage: string;\n  isLoading: boolean;\n  isShippingMethodLoading: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowOrderComments: boolean;\n  step: CheckoutStepStatus;\n  isInitialValueLoaded: boolean;\n  isStripeLoading?(): void;\n  isStripeAutoStep?(): void;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isUpdatingShippingData: false,\n  };\n\n  render(): ReactNode {\n    const {\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      countries,\n      isStripeLoading,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      onSubmit,\n      isStripeAutoStep,\n      step,\n      isShippingMethodLoading,\n    } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <StripeShippingAddress\n            consignments={consignments}\n            countries={countries}\n            deinitialize={deinitialize}\n            initialize={initialize}\n            isShippingMethodLoading={isShippingMethodLoading}\n            isStripeAutoStep={isStripeAutoStep}\n            isStripeLoading={isStripeLoading}\n            onAddressSelect={this.handleAddressSelect}\n            onSubmit={onSubmit}\n            shippingAddress={shippingAddress}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            step={step}\n          />\n          <div className=\"form-body\">\n            <BillingSameAsShippingField />\n          </div>\n        </Fieldset>\n\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      methodId\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  Customer,\n  CustomerRequestOptions,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  step: CheckoutStepStatus;\n  onCreateAccount(): void;\n  onToggleMultiShipping(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n  onSignIn(): void;\n  navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n  billingAddress?: Address;\n  cart: Cart;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isGuest: boolean;\n  isInitializing: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowMultiShipping: boolean;\n  shouldShowOrderComments: boolean;\n  shouldRenderWhileLoading: boolean;\n  providerWithCustomCheckout?: string;\n  isFloatingLabelEnabled?: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  loadShippingAddressFields(): Promise<CheckoutSelectors>;\n  loadBillingAddressFields(): Promise<CheckoutSelectors>;\n  loadShippingOptions(): Promise<CheckoutSelectors>;\n  signOut(options?: CustomerRequestOptions): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n  updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n  isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n  constructor(props: ShippingProps & WithCheckoutShippingProps) {\n    super(props);\n\n    this.state = {\n      isInitializing: true,\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    const {\n      loadShippingAddressFields,\n      loadBillingAddressFields,\n      loadShippingOptions,\n      onReady = noop,\n      onUnhandledError = noop,\n    } = this.props;\n\n    try {\n      await Promise.all([\n        loadShippingAddressFields(),\n        loadShippingOptions(),\n        loadBillingAddressFields(),\n      ]);\n\n      onReady();\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isInitializing: false });\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      billingAddress,\n      isBillingSameAsShipping,\n      isGuest,\n      shouldShowMultiShipping,\n      customer,\n      updateShippingAddress,\n      initializeShippingMethod,\n      deinitializeShippingMethod,\n      isMultiShippingMode,\n      step,\n      isFloatingLabelEnabled,\n      shouldRenderStripeForm,\n      shouldRenderWhileLoading,\n      ...shippingFormProps\n    } = this.props;\n\n    const { isInitializing } = this.state;\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n        <div className=\"checkout-form\">\n          <ShippingHeader\n            isGuest={isGuest}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingChange={this.handleMultiShippingModeSwitch}\n            shouldShowMultiShipping={shouldShowMultiShipping}\n          />\n          <ShippingForm\n            {...shippingFormProps}\n            addresses={customer.addresses}\n            billingAddress={billingAddress || ({} as Address)}\n            deinitialize={deinitializeShippingMethod}\n            initialize={initializeShippingMethod}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingSubmit={this.handleMultiShippingSubmit}\n            onSingleShippingSubmit={this.handleSingleShippingSubmit}\n            onUseNewAddress={this.handleUseNewAddress}\n            shouldShowSaveAddress={!isGuest}\n            updateAddress={updateShippingAddress}\n          />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleMultiShippingModeSwitch: () => void = async () => {\n    const {\n      consignments,\n      isMultiShippingMode,\n      onToggleMultiShipping = noop,\n      onUnhandledError = noop,\n      updateShippingAddress,\n    } = this.props;\n\n    if (isMultiShippingMode && consignments.length > 1) {\n      this.setState({ isInitializing: true });\n\n      try {\n        // Collapse all consignments into one\n        await updateShippingAddress(consignments[0].shippingAddress);\n      } catch (error) {\n        onUnhandledError(error);\n      } finally {\n        this.setState({ isInitializing: false });\n      }\n    }\n\n    onToggleMultiShipping();\n  };\n\n  private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n    billingSameAsShipping,\n    shippingAddress: addressValues,\n    orderComment,\n  }) => {\n    const {\n      customerMessage,\n      updateCheckout,\n      updateShippingAddress,\n      updateBillingAddress,\n      navigateNextStep,\n      onUnhandledError,\n      shippingAddress,\n      billingAddress,\n      methodId,\n    } = this.props;\n\n    const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n    if (\n      !isEqualAddress(updatedShippingAddress, shippingAddress) ||\n      shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress\n    ) {\n      promises.push(updateShippingAddress(updatedShippingAddress || {}));\n    }\n\n    if (\n      billingSameAsShipping &&\n      updatedShippingAddress &&\n      !isEqualAddress(updatedShippingAddress, billingAddress) &&\n      !hasRemoteBilling\n    ) {\n      promises.push(updateBillingAddress(updatedShippingAddress));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep(billingSameAsShipping);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n\n  private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n    const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n    return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n  };\n\n  private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n    address,\n    itemId,\n  ) => {\n    const { unassignItem, onUnhandledError } = this.props;\n\n    try {\n      await unassignItem({\n        address,\n        lineItems: [\n          {\n            quantity: 1,\n            itemId,\n          },\n        ],\n      });\n\n      location.href = '/account.php?action=add_shipping_address&from=checkout';\n    } catch (error) {\n      if (error instanceof UnassignItemError) {\n        onUnhandledError(new UnassignItemError(error));\n      }\n    }\n  };\n\n  private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n    orderComment,\n  }) => {\n    const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n    try {\n      if (customerMessage !== orderComment) {\n        await updateCheckout({ customerMessage: orderComment });\n      }\n\n      navigateNextStep(false);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n  ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n  ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n  (deleteConsignment, consignments) => async () => {\n    if (!consignments || !consignments.length) {\n      return;\n    }\n\n    const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n    return data.getShippingAddress();\n  },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n  const {\n    data: {\n      getCart,\n      getCheckout,\n      getConfig,\n      getCustomer,\n      getConsignments,\n      getShippingAddress,\n      getBillingAddress,\n      getShippingAddressFields,\n      getShippingCountries,\n    },\n    statuses: {\n      isShippingStepPending,\n      isSelectingShippingOption,\n      isLoadingShippingOptions,\n      isUpdatingConsignment,\n      isCreatingConsignments,\n      isCreatingCustomerAddress,\n      isLoadingShippingCountries,\n      isUpdatingBillingAddress,\n      isUpdatingCheckout,\n    },\n  } = checkoutState;\n\n  const checkout = getCheckout();\n  const config = getConfig();\n  const consignments = getConsignments() || [];\n  const customer = getCustomer();\n  const cart = getCart();\n\n  if (!checkout || !config || !customer || !cart) {\n    return null;\n  }\n\n  const {\n    checkoutSettings: { enableOrderComments, features, hasMultiShippingEnabled, googleMapsApiKey },\n  } = config;\n\n  const methodId = getShippingMethodId(checkout, config);\n  const shippableItemsCount = getShippableItemsCount(cart);\n  const isLoading =\n    isLoadingShippingOptions() ||\n    isSelectingShippingOption() ||\n    isUpdatingConsignment() ||\n    isCreatingConsignments() ||\n    isUpdatingBillingAddress() ||\n    isUpdatingCheckout() ||\n    isCreatingCustomerAddress();\n  const shouldShowMultiShipping = hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  const shippingAddress =\n    !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n  const providerWithCustomCheckout = getProviderWithCustomCheckout(\n    config.checkoutSettings.providerWithCustomCheckout,\n  );\n\n  return {\n    assignItem: checkoutService.assignItemsToAddress,\n    billingAddress: getBillingAddress(),\n    cart,\n    consignments,\n    countries: getShippingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    createCustomerAddress: checkoutService.createCustomerAddress,\n    deinitializeShippingMethod: checkoutService.deinitializeShipping,\n    deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n    getFields: getShippingAddressFields,\n    googleMapsApiKey,\n    initializeShippingMethod: checkoutService.initializeShipping,\n    isGuest: customer.isGuest,\n    isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n    isLoading,\n    isShippingStepPending: isShippingStepPending(),\n    loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n    loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n    loadShippingOptions: checkoutService.loadShippingOptions,\n    methodId,\n    providerWithCustomCheckout,\n    shippingAddress,\n    shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n    shouldShowMultiShipping,\n    shouldShowOrderComments: enableOrderComments,\n    signOut: checkoutService.signOutCustomer,\n    unassignItem: checkoutService.unassignItemsToAddress,\n    updateBillingAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    updateShippingAddress: checkoutService.updateShippingAddress,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    shouldRenderStripeForm:\n      providerWithCustomCheckout === PaymentMethodId.StripeUPE &&\n      shouldUseStripeLinkByMinimumAmount(cart),\n  };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n"],"names":["ExtensionRegionContainer","extensionRegionToContainerMap","ShippingShippingAddressFormBefore","ShippingShippingAddressFormAfter","ShippingSelectedShippingMethod","SummaryAfter","SummaryLastItemAfter","Extension","region","getExtensions","getConfig","getCheckout","extensions","config","checkout","extensionService","extensionContext","useContext","ExtensionContext","Error","useExtensions","isRegionEnabled","containerId","useEffect","renderExtension","removeListeners","id","isEqualAddress","address1","address2","isEqual","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","address","omit","customFields","filter","mapAddressFromFormValues","formValues","shouldSaveAddress","getPreselectedPayment","payments","find","payment","providerId","data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","indexOf","undefined","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","field","types","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","length","map","item","key","content","stateReducer","state","changes","onChange","inputValue","isOpen","handleStateChange","onToggleOpen","noop","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","maxLength","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","default","Component","withLanguage","AddressForm","SaveAddressForm","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","validationSchema","getFields","getAddressFormFieldsValidationSchema","isLoading","onRequestClose","Form","LoadingOverlay","href","onClick","preventDefault","Button","disabled","variant","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","consignment","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","selectedAddress","checked","StaticAddress","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","newAddress","PoweredByPayPalFastlaneLabel","imageUrl","options","handleUseNewAddress","handleSelectAddress","alt","src","optionName","nameId","shippingAddress","AddressType","withFormikExtended","OriginalComponent","DecoratedComponent","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","displayName","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","inputName","shippingOptions","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticConsignmentItemList","withAnalytics","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getCustomer","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldDisableSubmit","legend","Legend","Alert","ShippingOptions","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItems","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","shouldShowOrderComments","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","onAddressSelect","PayPalFastlaneShippingAddress","fieldValue","formFieldName","handleChange","handleAutocompleteToggle","editAddress","showEditAddressModal","updateShippingAddress","formAddress","hasAddresses","hasValidCustomerAddress","some","customerAddress","isValidCustomerAddress","handleCloseEditAddressModal","event","handleEditAddress","unmountContentWhenLoading","display","flexDirection","gap","target","editedaddress","first_name","last_name","state_or_province","postal_code","country_code","address_type","fetch","headers","Accept","body","JSON","stringify","r","json","state_or_province_code","console","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","setSubmitted","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","include","shippingAutosaveDelay","addressForm","updatedShippingAddress","Array","isArray","contextType","billingSameAsShipping","localStorage","getItem","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","useState","isBillingSameAsShippingState","setIsBillingSameAsShippingState","isBillingSameAsShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shouldShowMultiShipping","onMultiShippingChange","shippingFormProps","AddressFormSkeleton","handleMultiShippingModeSwitch","onToggleMultiShipping","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","shouldUseStripeLinkByMinimumAmount","Shipping"],"sourceRoot":""}