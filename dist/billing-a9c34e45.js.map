{"version":3,"file":"billing-a9c34e45.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx","webpack://checkout/./packages/core/src/app/common/input/index.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/giftCertificate/isGiftCertificatePayment.ts","webpack://checkout/./packages/core/src/app/payment/storeCredit/isStoreCreditPayment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts"],"sourcesContent":["import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import {\n  Address,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useEffect, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isEqualAddress,\n  isValidAddress,\n  mapAddressToFormValues,\n  StaticAddress,\n} from '../address';\nimport { InputField } from '../common/input';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nimport './BillingForm.scss';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n  billingAddress?: any;\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isUpdating: boolean;\n  methodId?: string;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: BillingFormValues): void;\n  onUnhandledError(error: Error): void;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  selectedShippingAddress: Address;\n  navigateNextStep(): void;\n}\n\nconst BillingForm = ({\n  // googleMapsApiKey,\n  billingAddress,\n  countries,\n  isUpdating,\n  methodId,\n  updateAddress,\n  onUnhandledError,\n  selectedShippingAddress,\n  navigateNextStep,\n}: // navigateTo,\n// navigateNextStep,\nBillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n  const [isResettingAddress, setIsResettingAddress] = useState(false);\n  const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n  const shouldRenderStaticAddress = methodId === 'amazonpay';\n\n  const addressInStore = JSON.parse(localStorage.getItem('billingAddress') || '{}');\n  const [openEdit, setOpenEdit] = useState<boolean>(false);\n  const [tempBillingAddress, setTempBillingAddress] = useState<Address>({\n    ...addressInStore,\n    countryCode: 'US',\n    stateOrProvince: addressInStore?.stateOrProvince || 'Alabama',\n    stateOrProvinceCode: addressInStore?.stateOrProvinceCode || 'AL',\n  });\n\n  const [billingAddressFromProps, setBillingAddressFromProps] = useState<Address>(billingAddress);\n\n  const billingAddressesToShow = [{ ...selectedShippingAddress }, { ...tempBillingAddress }].filter(\n    (addres) =>\n      isValidAddress(addres, []) &&\n      !!addres.firstName &&\n      addres.firstName !== '' &&\n      !!addres.lastName &&\n      addres.lastName !== '' &&\n      (addres?.address1?.length || 0) > 0 &&\n      (addres?.address2?.length || 0) > 0 &&\n      (addres?.city?.length || 0) > 0 &&\n      (addres?.postalCode?.length || 0) > 0,\n  );\n\n  const billingAddresses = isPayPalFastlaneEnabled\n    ? paypalFastlaneAddresses\n    : billingAddressesToShow;\n  const hasAddresses = billingAddresses?.length > 0;\n\n  useEffect(() => {\n    setTempBillingAddress({\n      ...addressInStore,\n      countryCode: 'US',\n      company: '',\n      stateOrProvince: addressInStore?.stateOrProvince || 'Alabama',\n      stateOrProvinceCode: addressInStore?.stateOrProvinceCode || 'AL',\n    });\n  }, []);\n\n  useEffect(() => {\n    setBillingAddressFromProps(billingAddress);\n  }, [billingAddress]);\n\n  const handleSelectAddress = async (address: Partial<Address>) => {\n    setIsResettingAddress(true);\n\n    try {\n      await updateAddress(address);\n\n      // if (isGuest) {\n      navigateNextStep();\n      // }\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    } finally {\n      setIsResettingAddress(false);\n    }\n  };\n\n  const handleAddNewTempAddress = (e: any) => {\n    e.preventDefault();\n    setOpenEdit(true);\n    setTempBillingAddress({\n      ...tempBillingAddress,\n      firstName: '',\n      lastName: '',\n      address1: '',\n      address2: '',\n      city: '',\n      postalCode: '',\n      countryCode: 'US',\n      stateOrProvince: 'Alabama',\n      stateOrProvinceCode: 'AL',\n    });\n  };\n\n  const handleSaveTempAddress = (e: any) => {\n    e.preventDefault();\n\n    const add = {\n      ...tempBillingAddress,\n      country: countries.find((country) => country.code === tempBillingAddress.countryCode)?.name,\n      stateOrProvince:\n        countries\n          .find((country) => country.code === tempBillingAddress.countryCode)\n          ?.subdivisions.find(\n            (subdivision) => subdivision.code === tempBillingAddress.stateOrProvince,\n          )?.name ?? tempBillingAddress.stateOrProvince,\n      stateOrProvinceCode:\n        countries\n          .find((country) => country.code === tempBillingAddress.countryCode)\n          ?.subdivisions.find(\n            (subdivision) => subdivision.code === tempBillingAddress.stateOrProvince,\n          )?.code ?? tempBillingAddress.stateOrProvinceCode,\n    };\n\n    localStorage.setItem('billingAddress', JSON.stringify(add));\n    handleSelectAddress({ ...tempBillingAddress, id: billingAddress?.id } as Address);\n    setOpenEdit(false);\n  };\n\n  return (\n    <Form autoComplete=\"on\" className=\"billing-address-form\">\n      {shouldRenderStaticAddress && billingAddress && (\n        <div className=\"form-fieldset\">\n          <StaticBillingAddress\n            address={billingAddress}\n            showSameAsShippingLable={isEqualAddress(billingAddress, selectedShippingAddress)}\n          />\n        </div>\n      )}\n      <div className=\"billing-address-add-new-container\">\n        <div className=\"billing-address-add-new\" onClick={handleAddNewTempAddress}>\n          Add new Address\n        </div>\n      </div>\n      <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n        {hasAddresses && !shouldRenderStaticAddress && !openEdit && (\n          <Fieldset id=\"billingAddresses\">\n            <LoadingOverlay isLoading={isResettingAddress}>\n              <div className=\"custom-billing-address-list\">\n                {billingAddressesToShow.map((address, index: number) => {\n                  return (\n                    <div className=\"custom-billing-address-container\" key={index}>\n                      <div\n                        className=\"custom-billing-address\"\n                        onClick={(event) => {\n                          event.preventDefault();\n                          handleSelectAddress({ ...address, id: billingAddress?.id } as Address);\n                        }}\n                      >\n                        <input\n                          checked={isEqualAddress(address, billingAddressFromProps)}\n                          className=\"billing-address-input\"\n                          type=\"radio\"\n                        />\n                        <div className=\"billing-address-container\">\n                          <StaticAddress address={address as Address} />\n                        </div>\n                      </div>\n                      {isEqualAddress(address, selectedShippingAddress) && (\n                        <div className=\"billing-addres-same-shipping-label\">\n                          same as shipping address\n                        </div>\n                      )}\n                      {isEqualAddress(address, tempBillingAddress) && (\n                        <div\n                          className=\"billing-addres-edit-label\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setOpenEdit(true);\n                            e.stopPropagation();\n                          }}\n                        >\n                          edit\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n\n        {openEdit && (\n          <AddressFormSkeleton isLoading={isResettingAddress}>\n            <div>\n              <div className=\"temp-billing-address-container\">\n                <div className=\"temp-billing-address-name-container\">\n                  <div className=\"temp-billing-address-firstname\">\n                    <InputField\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, firstName: e.target.value })\n                      }\n                      title=\"First Name\"\n                      value={tempBillingAddress.firstName}\n                    />\n                  </div>\n                  <div className=\"temp-billing-address-lastname\">\n                    <InputField\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      onChange={(e: { target: { value: any } }) => {\n                        setTempBillingAddress({ ...tempBillingAddress, lastName: e.target.value });\n                      }}\n                      title=\"Last Name\"\n                      value={tempBillingAddress.lastName}\n                    />\n                  </div>\n                </div>\n                <div className=\"temp-billing-address1-container\">\n                  <InputField\n                    id=\"address1\"\n                    name=\"address1\"\n                    onChange={(e: { target: { value: any } }) =>\n                      setTempBillingAddress({ ...tempBillingAddress, address1: e.target.value })\n                    }\n                    title=\"Address\"\n                    value={tempBillingAddress.address1}\n                  />\n                </div>\n                <div className=\"temp-billing-address2-container\">\n                  <InputField\n                    id=\"address2\"\n                    name=\"address2\"\n                    onChange={(e: { target: { value: any } }) =>\n                      setTempBillingAddress({ ...tempBillingAddress, address2: e.target.value })\n                    }\n                    title=\"Address\"\n                    value={tempBillingAddress.address2}\n                  />\n                </div>\n                <div className=\"temp-billing-address-country-container\">\n                  <select\n                    className=\"temp-billing-address-country-select\"\n                    onChange={(e) =>\n                      setTempBillingAddress({ ...tempBillingAddress, countryCode: e.target.value })\n                    }\n                    value={tempBillingAddress.countryCode || 'US'}\n                  >\n                    {countries.map((country) => (\n                      <option key={country.code} value={country.code}>\n                        {country.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"temp-billing-address-state-city-container\">\n                  <div className=\"temp-billing-address-state\">\n                    {(\n                      countries?.find((c) => c.code === tempBillingAddress.countryCode)\n                        ?.subdivisions ?? []\n                    )?.length > 0 ? (\n                      <div className=\"temp-billing-address-state-container\">\n                        <select\n                          className=\"temp-billing-address-state-select\"\n                          onChange={(e) =>\n                            setTempBillingAddress({\n                              ...tempBillingAddress,\n                              stateOrProvince: e.target.value,\n                            })\n                          }\n                          value={tempBillingAddress.stateOrProvinceCode}\n                        >\n                          {(\n                            countries?.find((c) => c.code === tempBillingAddress.countryCode)\n                              ?.subdivisions ?? []\n                          ).map((state) => (\n                            <option key={state.code} value={state.code}>\n                              {state.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    ) : (\n                      <div className=\"temp-billing-address-state-container\">\n                        <InputField\n                          id=\"stateOrProvince\"\n                          name=\"stateOrProvince\"\n                          onChange={(e: { target: { value: any } }) =>\n                            setTempBillingAddress({\n                              ...tempBillingAddress,\n                              stateOrProvince: e.target.value,\n                            })\n                          }\n                          title=\"State Or Province\"\n                          value={tempBillingAddress.stateOrProvince}\n                        />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"temp-billing-address-city-container\">\n                    <InputField\n                      id=\"city\"\n                      name=\"city\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, city: e.target.value })\n                      }\n                      title=\"City\"\n                      value={tempBillingAddress.city}\n                    />\n                  </div>\n                </div>\n                <div className=\"temp-billing-address-postalcode-phone-container\">\n                  <div className=\"temp-billing-address-postalcode-container\">\n                    <InputField\n                      id=\"postalCode\"\n                      name=\"postalCode\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, postalCode: e.target.value })\n                      }\n                      title=\"Postal Code\"\n                      value={tempBillingAddress.postalCode}\n                    />\n                  </div>\n                  <div className=\"temp-billing-address-phone-container\">\n                    <InputField\n                      id=\"phone\"\n                      name=\"phone\"\n                      onChange={(e: { target: { value: any } }) => {\n                        setTempBillingAddress({ ...tempBillingAddress, phone: e.target.value });\n                      }}\n                      title=\"Phone\"\n                      value={tempBillingAddress.phone}\n                    />\n                  </div>\n                </div>\n                <div className=\"temp-billing-address-button-container\">\n                  <button\n                    className=\"temp-billing-address-cancel-button\"\n                    onClick={() => setOpenEdit(false)}\n                    type=\"button\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    className=\"temp-billing-address-save-button\"\n                    onClick={handleSaveTempAddress}\n                    type=\"button\"\n                  >\n                    Save\n                  </button>\n                </div>\n              </div>\n            </div>\n          </AddressFormSkeleton>\n        )}\n      </Fieldset>\n      <div className=\"form-actions\">\n        <Button\n          disabled={isUpdating || isResettingAddress}\n          id=\"checkout-billing-continue\"\n          isLoading={isUpdating || isResettingAddress}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default withLanguage(\n  withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n      ...mapAddressToFormValues(\n        getFields(billingAddress && billingAddress.countryCode),\n        billingAddress,\n      ),\n      orderComment: customerMessage,\n    }),\n    isInitialValid: ({ billingAddress, getFields, language }) =>\n      !!billingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(billingAddress.countryCode),\n      }).isValidSync(billingAddress),\n    validationSchema: ({ language, getFields, methodId }: BillingFormProps & WithLanguageProps) =>\n      methodId === 'amazonpay'\n        ? lazy<Partial<AddressFormValues>>((values) =>\n            getCustomFormFieldsValidationSchema({\n              translate: getTranslateAddressError(language),\n              formFields: getFields(values && values.countryCode),\n            }),\n          )\n        : lazy<Partial<AddressFormValues>>((values) =>\n            getAddressFormFieldsValidationSchema({\n              language,\n              formFields: getFields(values && values.countryCode),\n            }),\n          ),\n    enableReinitialize: true,\n  })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","/* eslint-disable no-console */\nimport {\n  Address,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\n// import CheckoutStepType from '../checkout/CheckoutStepType';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n  navigateNextStep(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isInitializing: boolean;\n  isUpdating: boolean;\n  shouldShowOrderComments: boolean;\n  billingAddress?: Address;\n  methodId?: string;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  initialize(): Promise<CheckoutSelectors>;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n  selectedShippingAddress: Address;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n  async componentDidMount(): Promise<void> {\n    const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n    try {\n      await initialize();\n      onReady();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  }\n\n  // /CheckoutStepType.Billing\n\n  render(): ReactNode {\n    const { updateAddress, isInitializing, selectedShippingAddress, ...props } = this.props;\n\n    console.log('selectedShippingAddress : ', selectedShippingAddress);\n    console.log('[this.props] billingAddress : ', this.props.billingAddress);\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing}>\n        <div className=\"checkout-form\">\n          <div className=\"form-legend-container\">\n            <Legend testId=\"billing-address-heading\">\n              <TranslatedString id=\"billing.billing_address_heading\" />\n            </Legend>\n          </div>\n          <BillingForm\n            {...props}\n            onSubmit={this.handleSubmit}\n            selectedShippingAddress={selectedShippingAddress}\n            updateAddress={updateAddress}\n          />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleSubmit: (values: BillingFormValues) => void = async ({\n    orderComment,\n    ...addressValues\n  }) => {\n    const {\n      updateAddress,\n      updateCheckout,\n      customerMessage,\n      billingAddress,\n      navigateNextStep,\n      onUnhandledError,\n    } = this.props;\n\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const address = mapAddressFromFormValues(addressValues);\n\n    if (address && !isEqualAddress(address, billingAddress)) {\n      promises.push(updateAddress(address));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nfunction mapToBillingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n  const {\n    data: {\n      getCheckout,\n      getConfig,\n      getCart,\n      getCustomer,\n      getBillingAddress,\n      getBillingAddressFields,\n      getBillingCountries,\n      getShippingAddress,\n    },\n    statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n  } = checkoutState;\n\n  const config = getConfig();\n  const customer = getCustomer();\n  const checkout = getCheckout();\n  const cart = getCart();\n\n  if (!config || !customer || !checkout || !cart) {\n    return null;\n  }\n\n  const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  return {\n    billingAddress: getBillingAddress(),\n    countries: getBillingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    getFields: getBillingAddressFields,\n    googleMapsApiKey,\n    initialize: checkoutService.loadBillingAddressFields,\n    isInitializing: isLoadingBillingCountries(),\n    isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n    methodId: getBillingMethodId(checkout),\n    shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n    updateAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    selectedShippingAddress: getShippingAddress() || ({} as Address),\n  };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n","import React, { InputHTMLAttributes, useState } from 'react';\n\nimport './inputField.scss';\n\ninterface InputFieldProps extends InputHTMLAttributes<HTMLInputElement> {\n  id: string;\n  name: string;\n  title: string;\n  value: string;\n  onChange: any;\n}\n\nexport const InputField = ({ id, name, title, value, onChange, ...rest }: InputFieldProps) => {\n  const [focused, setFocused] = useState(false);\n\n  const handleFocus = () => {\n    setFocused(true);\n  };\n\n  const handleBlur = () => {\n    setFocused(false);\n  };\n\n  return (\n    <div>\n      <div className={`input-field-container ${focused ? 'focused-input-field-container' : ''}`}>\n        <div className={`input-field-title ${focused || value ? 'active' : ''}`}>{title}</div>\n        <input\n          {...rest}\n          className={`input-field-input ${focused ? 'focused' : ''}`}\n          id={id}\n          name={name}\n          onBlur={handleBlur}\n          onChange={onChange}\n          onFocus={handleFocus}\n          type=\"text\"\n          value={value}\n        />\n      </div>\n    </div>\n  );\n};\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import {\n    CheckoutPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n} from '@bigcommerce/checkout-sdk';\n\nexport default function isGiftCertificatePayment(\n    payment: OrderPayment | CheckoutPayment,\n): payment is GiftCertificateOrderPayment {\n    return payment.providerId === 'giftcertificate';\n}\n","import { CheckoutPayment, OrderPayment } from '@bigcommerce/checkout-sdk';\n\nexport default function isStoreCreditPayment(payment: OrderPayment | CheckoutPayment): boolean {\n    return payment.providerId === 'storecredit';\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n"],"names":["mapAddressFromFormValues","formValues","customFields","address","shouldSaveAddress","withLanguage","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","countries","isUpdating","methodId","updateAddress","onUnhandledError","selectedShippingAddress","navigateNextStep","useState","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","usePayPalFastlaneAddress","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shouldRenderStaticAddress","addressInStore","JSON","parse","localStorage","getItem","openEdit","setOpenEdit","stateOrProvince","stateOrProvinceCode","tempBillingAddress","setTempBillingAddress","billingAddressFromProps","setBillingAddressFromProps","billingAddressesToShow","filter","addres","isValidAddress","firstName","lastName","address1","length","address2","city","postalCode","billingAddresses","hasAddresses","useEffect","company","handleSelectAddress","Error","Form","autoComplete","className","StaticBillingAddress","showSameAsShippingLable","isEqualAddress","onClick","e","preventDefault","Fieldset","id","ref","LoadingOverlay","isLoading","map","index","key","event","checked","type","StaticAddress","stopPropagation","AddressFormSkeleton","name","onChange","target","value","title","country","code","find","c","subdivisions","state","phone","add","subdivision","setItem","stringify","Button","disabled","variant","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","addressValues","this","props","updateCheckout","promises","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","console","log","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","getShippingAddress","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","customer","cart","checkoutSettings","enableOrderComments","googleMapsApiKey","countriesWithAutocomplete","loadBillingAddressFields","shouldShowOrderComments","getShippableItemsCount","updateBillingAddress","isFloatingLabelEnabled","Billing","InputField","rest","focused","setFocused","onBlur","onFocus","payments","payment","isGiftCertificatePayment","isStoreCreditPayment","lineItems","physicalItems","item","addedByPromotion"],"sourceRoot":""}