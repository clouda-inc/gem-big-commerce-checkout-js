{"version":3,"file":"order-comment-9c1cbca6.js","mappings":"qOAwBA,cAIE,WAAYA,GAAZ,MACE,YAAMA,IAAM,K,OACZ,EAAKC,MAAQ,CACXC,QAASF,EAAME,SAAW,GAE1BC,SAAS,G,CAEb,CA2IF,OAtJ2B,oBAazB,YAAAC,mBAAA,SAAmBC,GACbA,EAAUH,UAAYI,KAAKN,MAAME,SACnCI,KAAKC,SAAS,CAAEL,QAASI,KAAKN,MAAME,SAExC,EAEA,YAAAM,OAAA,sBACUN,EAAYI,KAAKN,MAAK,QAExBS,EAA2B,SAAOC,GAAU,kD,uEAOhD,OANAA,EAAMC,iBAEET,EAAYI,KAAKL,MAAK,QAI9B,IAFQW,EAAmBN,KAAKN,MAAK,gBAEhB,CAAEa,gBAAiBX,K,cAAxC,SAEAI,KAAKC,SAAS,CAAEJ,SAAS,I,YAa3B,OACE,uBAAKW,UAAU,0BACb,uBAAKA,UAAU,iBACb,uBAAKA,UAAU,uBACb,gBAACC,EAAA,EAAgB,CAACC,GAAG,8BAErBd,IAAYI,KAAKL,MAAME,SACvB,2BACE,2BACE,uBAAKW,UAAU,+BACb,uBAAKA,UAAU,iCACb,uBAAKA,UAAU,6BACb,gBAACC,EAAA,EAAgB,CAACC,GAAG,mCAEvB,4BACEF,UAAU,sBACVG,KAAM,GACNC,SAAUZ,KAAKN,MAAMmB,UACrBC,SAAU,SAACC,GACT,EAAKd,SAAS,CAAEL,QAASmB,EAAEC,OAAOC,OACpC,EACAC,KAAM,EACND,MAAOjB,KAAKL,MAAMC,WAGtB,2BACE,0BACEY,UAAU,uBACVI,SAAUZ,KAAKN,MAAMmB,UACrBM,QAAShB,GAAwB,qBAS1CP,IAAYI,KAAKL,MAAME,SACxB,2BACE,uBAAKW,UAAU,+BACb,uBAAKA,UAAU,iCACb,uBAAKA,UAAU,6BACb,gBAACC,EAAA,EAAgB,CAACC,GAAG,mCAEvB,4BACEF,UAAU,sBACVG,KAAM,GACNC,UAAQ,EACRM,KAAM,EACND,MAAOjB,KAAKL,MAAMC,WAGtB,uBAAKY,UAAU,wCACb,0BACEA,UAAU,oCACVW,QAlEiB,SAAOf,GAAU,kD,iEAKhD,OAJAA,EAAMC,iBAIN,IAFQC,EAAmBN,KAAKN,MAAK,gBAEhB,CAAEa,gBAAiB,M,cAAxC,SAEAP,KAAKC,SAAS,CAAEJ,SAAS,I,aA2DsB,UAInC,0BACEW,UAAU,kCACVW,QAAS,WAAM,SAAKlB,SAAS,CAAEJ,SAAS,GAAzB,GAAgC,aAQtDD,GAAWI,KAAKL,MAAME,SACvB,2BACE,2BACE,uBAAKW,UAAU,+BACb,uBAAKA,UAAU,iCACb,uBAAKA,UAAU,6BACb,gBAACC,EAAA,EAAgB,CAACC,GAAG,mCAEvB,4BACEF,UAAU,sBACVG,KAAM,GACNC,SAAUZ,KAAKN,MAAMmB,UACrBC,SAAU,SAACC,GACT,EAAKd,SAAS,CAAEL,QAASmB,EAAEC,OAAOC,OACpC,EACAC,KAAM,EACND,MAAOjB,KAAKL,MAAMC,WAGtB,2BACE,0BACEY,UAAU,uBACVI,SAAUZ,KAAKN,MAAMmB,UACrBM,QAAShB,GAAwB,uBAYrD,EACF,EAtJA,CAA2B,EAAAiB,WAwJpB,SAASC,EAAuB,G,IACrCC,EAAe,kBACfC,EAAa,gBAGHC,EAEND,EAAa,iBADHE,EACVF,EAAa,4BAEXG,EAAWF,IAEjB,IAAKE,EACH,OAAO,KAGT,IAAMb,EAAYY,IAElB,MAAO,CACL7B,QAAS8B,EAASnB,gBAClBM,UAAS,EACTP,eAAgBgB,EAAgBhB,eAEpC,CAEA,SAAe,EAAAqB,EAAA,IAAc,EAAAC,EAAA,IAAa,EAAAC,EAAA,GAAaR,EAAb,CAAqCS,I","sources":["webpack://checkout/./packages/core/src/app/cart/order-comment/OrderComment.tsx"],"sourcesContent":["import { CheckoutRequestBody, CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withAnalytics } from '../../analytics';\nimport { withCheckout } from '../../checkout';\nimport { WithCheckoutProps } from '../../checkout/Checkout';\n\nimport './OrderComment.scss';\n\ninterface OrderCommentStates {\n  comment: string;\n  // hasComment: boolean;\n  editing: boolean;\n}\n\ninterface OrderCommentProps {\n  comment: string;\n  isLoading: boolean;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass OrderComment extends Component<\n  WithCheckoutProps & WithLanguageProps & OrderCommentProps,\n  OrderCommentStates\n> {\n  constructor(props: WithCheckoutProps & WithLanguageProps & OrderCommentProps) {\n    super(props);\n    this.state = {\n      comment: props.comment || '',\n      // hasComment: !!props.comment,\n      editing: false,\n    };\n  }\n\n  componentDidUpdate(prevProps: OrderCommentProps) {\n    if (prevProps.comment !== this.props.comment) {\n      this.setState({ comment: this.props.comment });\n    }\n  }\n\n  render(): ReactNode {\n    const { comment } = this.props;\n\n    const handleSubmitOrderComment = async (event: any) => {\n      event.preventDefault();\n\n      const { comment } = this.state;\n\n      const { updateCheckout } = this.props;\n\n      await updateCheckout({ customerMessage: comment });\n\n      this.setState({ editing: false });\n    };\n\n    const handleDeleteOrderComment = async (event: any) => {\n      event.preventDefault();\n\n      const { updateCheckout } = this.props;\n\n      await updateCheckout({ customerMessage: '' });\n\n      this.setState({ editing: false });\n    };\n\n    return (\n      <div className=\"checkout-order-wrapper\">\n        <div className=\"order-comment\">\n          <div className=\"order-comment-label\">\n            <TranslatedString id=\"cart.orderComment.title\" />\n          </div>\n          {!comment && !this.state.editing && (\n            <div>\n              <div>\n                <div className=\"order-comment-input-wrapper\">\n                  <div className=\"order-comment-input-container\">\n                    <div className=\"order-comment-input-lable\">\n                      <TranslatedString id=\"cart.orderComment.placeholder\" />\n                    </div>\n                    <textarea\n                      className=\"order-comment-input\"\n                      cols={30}\n                      disabled={this.props.isLoading}\n                      onChange={(e) => {\n                        this.setState({ comment: e.target.value });\n                      }}\n                      rows={5}\n                      value={this.state.comment}\n                    />\n                  </div>\n                  <div>\n                    <button\n                      className=\"order-comment-submit\"\n                      disabled={this.props.isLoading}\n                      onClick={handleSubmitOrderComment}\n                    >\n                      Add Comment\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          {!!comment && !this.state.editing && (\n            <div>\n              <div className=\"order-comment-value-wrapper\">\n                <div className=\"order-comment-value-container\">\n                  <div className=\"order-comment-input-lable\">\n                    <TranslatedString id=\"cart.orderComment.placeholder\" />\n                  </div>\n                  <textarea\n                    className=\"order-comment-value\"\n                    cols={30}\n                    disabled\n                    rows={5}\n                    value={this.state.comment}\n                  />\n                </div>\n                <div className=\"order-comment-value-action-container\">\n                  <button\n                    className=\"order-comment-value-delete-button\"\n                    onClick={handleDeleteOrderComment}\n                  >\n                    Delete\n                  </button>\n                  <button\n                    className=\"order-comment-value-edit-button\"\n                    onClick={() => this.setState({ editing: true })}\n                  >\n                    Edit\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n          {!!comment && this.state.editing && (\n            <div>\n              <div>\n                <div className=\"order-comment-input-wrapper\">\n                  <div className=\"order-comment-input-container\">\n                    <div className=\"order-comment-input-lable\">\n                      <TranslatedString id=\"cart.orderComment.placeholder\" />\n                    </div>\n                    <textarea\n                      className=\"order-comment-input\"\n                      cols={30}\n                      disabled={this.props.isLoading}\n                      onChange={(e) => {\n                        this.setState({ comment: e.target.value });\n                      }}\n                      rows={5}\n                      value={this.state.comment}\n                    />\n                  </div>\n                  <div>\n                    <button\n                      className=\"order-comment-submit\"\n                      disabled={this.props.isLoading}\n                      onClick={handleSubmitOrderComment}\n                    >\n                      Update Comment\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport function mapToOrderCommentProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): OrderCommentProps | null {\n  const {\n    data: { getCheckout },\n    statuses: { isUpdatingCheckout },\n  } = checkoutState;\n\n  const checkout = getCheckout();\n\n  if (!checkout) {\n    return null;\n  }\n\n  const isLoading = isUpdatingCheckout();\n\n  return {\n    comment: checkout.customerMessage,\n    isLoading,\n    updateCheckout: checkoutService.updateCheckout,\n  };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToOrderCommentProps)(OrderComment)));\n"],"names":["props","state","comment","editing","componentDidUpdate","prevProps","this","setState","render","handleSubmitOrderComment","event","preventDefault","updateCheckout","customerMessage","className","TranslatedString","id","cols","disabled","isLoading","onChange","e","target","value","rows","onClick","Component","mapToOrderCommentProps","checkoutService","checkoutState","getCheckout","isUpdatingCheckout","checkout","withAnalytics","withLanguage","withCheckout","OrderComment"],"sourceRoot":""}