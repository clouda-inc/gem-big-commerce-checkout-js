{"version":3,"file":"billing-30173809.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\n  Address,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressForm,\n  AddressFormValues,\n  AddressSelect,\n  AddressType,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isValidCustomerAddress,\n  mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\n// import { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n  billingAddress?: Address;\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isUpdating: boolean;\n  methodId?: string;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: BillingFormValues): void;\n  onUnhandledError(error: Error): void;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst BillingForm = ({\n  googleMapsApiKey,\n  billingAddress,\n  countriesWithAutocomplete,\n  customer: { addresses, isGuest },\n  getFields,\n  countries,\n  isUpdating,\n  setFieldValue,\n  //   shouldShowOrderComments,\n  values,\n  methodId,\n  isFloatingLabelEnabled,\n  updateAddress,\n  onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n  const [isResettingAddress, setIsResettingAddress] = useState(false);\n  const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n  const shouldRenderStaticAddress = methodId === 'amazonpay';\n  const allFormFields = getFields(values.countryCode);\n  const customFormFields = allFormFields.filter(({ custom }) => custom);\n  const hasCustomFormFields = customFormFields.length > 0;\n  const editableFormFields =\n    shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n  const billingAddresses = isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\n  const hasAddresses = billingAddresses?.length > 0;\n  const hasValidCustomerAddress =\n    billingAddress &&\n    isValidCustomerAddress(billingAddress, billingAddresses, getFields(billingAddress.countryCode));\n\n  const handleSelectAddress = async (address: Partial<Address>) => {\n    setIsResettingAddress(true);\n\n    try {\n      await updateAddress(address);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    } finally {\n      setIsResettingAddress(false);\n    }\n  };\n\n  const handleUseNewAddress = () => {\n    handleSelectAddress({});\n  };\n\n  return (\n    <Form autoComplete=\"on\">\n      {shouldRenderStaticAddress && billingAddress && (\n        <div className=\"form-fieldset\">\n          <StaticBillingAddress address={billingAddress} />\n        </div>\n      )}\n\n      <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n        {hasAddresses && !shouldRenderStaticAddress && (\n          <Fieldset id=\"billingAddresses\">\n            <LoadingOverlay isLoading={isResettingAddress}>\n              <AddressSelect\n                addresses={billingAddresses}\n                onSelectAddress={handleSelectAddress}\n                onUseNewAddress={handleUseNewAddress}\n                selectedAddress={hasValidCustomerAddress ? billingAddress : undefined}\n                type={AddressType.Billing}\n              />\n              {/* <StaticAddress address={address} type={type} /> */}\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n\n        {!hasValidCustomerAddress && (\n          <AddressFormSkeleton isLoading={isResettingAddress}>\n            <AddressForm\n              countries={countries}\n              countriesWithAutocomplete={countriesWithAutocomplete}\n              countryCode={values.countryCode}\n              formFields={editableFormFields}\n              googleMapsApiKey={googleMapsApiKey}\n              isFloatingLabelEnabled={isFloatingLabelEnabled}\n              setFieldValue={setFieldValue}\n              shouldShowSaveAddress={!isGuest}\n            />\n          </AddressFormSkeleton>\n        )}\n      </Fieldset>\n\n      {/* {shouldShowOrderComments && <OrderComments />} */}\n\n      <div className=\"form-actions\">\n        <Button\n          disabled={isUpdating || isResettingAddress}\n          id=\"checkout-billing-continue\"\n          isLoading={isUpdating || isResettingAddress}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default withLanguage(\n  withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n      ...mapAddressToFormValues(\n        getFields(billingAddress && billingAddress.countryCode),\n        billingAddress,\n      ),\n      orderComment: customerMessage,\n    }),\n    isInitialValid: ({ billingAddress, getFields, language }) =>\n      !!billingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(billingAddress.countryCode),\n      }).isValidSync(billingAddress),\n    validationSchema: ({ language, getFields, methodId }: BillingFormProps & WithLanguageProps) =>\n      methodId === 'amazonpay'\n        ? lazy<Partial<AddressFormValues>>((values) =>\n            getCustomFormFieldsValidationSchema({\n              translate: getTranslateAddressError(language),\n              formFields: getFields(values && values.countryCode),\n            }),\n          )\n        : lazy<Partial<AddressFormValues>>((values) =>\n            getAddressFormFieldsValidationSchema({\n              language,\n              formFields: getFields(values && values.countryCode),\n            }),\n          ),\n    enableReinitialize: true,\n  })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import {\n  Address,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n  navigateNextStep(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isInitializing: boolean;\n  isUpdating: boolean;\n  shouldShowOrderComments: boolean;\n  billingAddress?: Address;\n  methodId?: string;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  initialize(): Promise<CheckoutSelectors>;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n  async componentDidMount(): Promise<void> {\n    const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n    try {\n      await initialize();\n      onReady();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  }\n\n  render(): ReactNode {\n    const { updateAddress, isInitializing, ...props } = this.props;\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing}>\n        <div className=\"checkout-form\">\n          <div className=\"form-legend-container\">\n            <Legend testId=\"billing-address-heading\">\n              <TranslatedString id=\"billing.billing_address_heading\" />\n            </Legend>\n          </div>\n          <BillingForm {...props} onSubmit={this.handleSubmit} updateAddress={updateAddress} />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleSubmit: (values: BillingFormValues) => void = async ({\n    orderComment,\n    ...addressValues\n  }) => {\n    const {\n      updateAddress,\n      updateCheckout,\n      customerMessage,\n      billingAddress,\n      navigateNextStep,\n      onUnhandledError,\n    } = this.props;\n\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const address = mapAddressFromFormValues(addressValues);\n\n    if (address && !isEqualAddress(address, billingAddress)) {\n      promises.push(updateAddress(address));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nfunction mapToBillingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n  const {\n    data: {\n      getCheckout,\n      getConfig,\n      getCart,\n      getCustomer,\n      getBillingAddress,\n      getBillingAddressFields,\n      getBillingCountries,\n    },\n    statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n  } = checkoutState;\n\n  const config = getConfig();\n  const customer = getCustomer();\n  const checkout = getCheckout();\n  const cart = getCart();\n\n  if (!config || !customer || !checkout || !cart) {\n    return null;\n  }\n\n  const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  return {\n    billingAddress: getBillingAddress(),\n    countries: getBillingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    getFields: getBillingAddressFields,\n    googleMapsApiKey,\n    initialize: checkoutService.loadBillingAddressFields,\n    isInitializing: isLoadingBillingCountries(),\n    isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n    methodId: getBillingMethodId(checkout),\n    shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n    updateAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n  };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"names":["withLanguage","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","googleMapsApiKey","countriesWithAutocomplete","customer","addresses","isGuest","countries","isUpdating","setFieldValue","methodId","isFloatingLabelEnabled","updateAddress","onUnhandledError","useState","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","usePayPalFastlaneAddress","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shouldRenderStaticAddress","allFormFields","customFormFields","filter","hasCustomFormFields","length","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","handleSelectAddress","address","Error","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","type","AddressType","AddressFormSkeleton","AddressForm","shouldShowSaveAddress","Button","disabled","variant","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","addressValues","this","props","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","shouldShowOrderComments","getShippableItemsCount","updateBillingAddress","Billing"],"sourceRoot":""}