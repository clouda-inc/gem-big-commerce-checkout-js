{"version":3,"file":"billing-33feadd9.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx","webpack://checkout/./packages/core/src/app/common/google-autofile/gogleAutoFile.tsx","webpack://checkout/./packages/core/src/app/common/input/index.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/giftCertificate/isGiftCertificatePayment.ts","webpack://checkout/./packages/core/src/app/payment/storeCredit/isStoreCreditPayment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts"],"sourcesContent":["import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import {\n  Address,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useEffect, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isEqualAddress,\n  isValidAddress,\n  mapAddressToFormValues,\n  StaticAddress,\n} from '../address';\nimport CheckoutStepType from '../checkout/CheckoutStepType';\nimport { CustomGoogleAutocomplete } from '../common/google-autofile';\nimport { InputField } from '../common/input';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nimport './BillingForm.scss';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\ninterface InputFieldErrorType {\n  input: string;\n  error: boolean;\n  type: 'validationMessage' | 'noError';\n}\n\nexport interface BillingFormProps {\n  billingAddress?: any;\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isUpdating: boolean;\n  methodId?: string;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: BillingFormValues): void;\n  onUnhandledError(error: Error): void;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  selectedShippingAddress: Address;\n  navigateNextStep(): void;\n}\n\nconst BillingForm = ({\n  googleMapsApiKey,\n  billingAddress,\n  countries,\n  isUpdating,\n  methodId,\n  updateAddress,\n  onUnhandledError,\n  selectedShippingAddress,\n  navigateNextStep,\n}: // navigateTo,\n// navigateNextStep,\nBillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n  const [isResettingAddress, setIsResettingAddress] = useState(false);\n  const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n  const shouldRenderStaticAddress = methodId === 'amazonpay';\n\n  const addressInStore = JSON.parse(localStorage.getItem('billingAddress') || '{}');\n  const [openEdit, setOpenEdit] = useState<boolean>(false);\n  const [tempBillingAddress, setTempBillingAddress] = useState<Address>({\n    ...addressInStore,\n    countryCode: 'US',\n    stateOrProvince: addressInStore?.stateOrProvince || 'Alabama',\n    stateOrProvinceCode: addressInStore?.stateOrProvinceCode || 'AL',\n  });\n\n  const [billingAddressFromProps, setBillingAddressFromProps] = useState<Address>(billingAddress);\n\n  const [inputError, setInputError] = useState<InputFieldErrorType>({\n    input: '',\n    error: false,\n    type: 'noError',\n  });\n\n  const billingAddressesToShow = [{ ...selectedShippingAddress }, { ...tempBillingAddress }].filter(\n    (addres) =>\n      isValidAddress(addres, []) &&\n      !!addres.firstName &&\n      addres.firstName !== '' &&\n      !!addres.lastName &&\n      addres.lastName !== '' &&\n      (addres?.address1?.length || 0) > 0 &&\n      (addres?.city?.length || 0) > 0 &&\n      (addres?.postalCode?.length || 0) > 0,\n  );\n\n  const billingAddresses = isPayPalFastlaneEnabled\n    ? paypalFastlaneAddresses\n    : billingAddressesToShow;\n  const hasAddresses = billingAddresses?.length > 0;\n\n  const email = billingAddress.email;\n\n  useEffect(() => {\n    setTempBillingAddress({\n      ...addressInStore,\n      countryCode: 'US',\n      company: '',\n      stateOrProvince: addressInStore?.stateOrProvince || 'Alabama',\n      stateOrProvinceCode: addressInStore?.stateOrProvinceCode || 'AL',\n    });\n  }, []);\n\n  useEffect(() => {\n    setBillingAddressFromProps(billingAddress);\n  }, [billingAddress]);\n\n  const handleSelectAddress = async (address: Partial<Address>) => {\n    setIsResettingAddress(true);\n\n    try {\n      await updateAddress({ ...address, email } as Address);\n\n      // if (isGuest) {\n      navigateNextStep();\n      // }\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    } finally {\n      setIsResettingAddress(false);\n    }\n  };\n\n  const handleAddNewTempAddress = (e: any) => {\n    e.preventDefault();\n    setOpenEdit(true);\n    setTempBillingAddress({\n      ...tempBillingAddress,\n      firstName: '',\n      lastName: '',\n      address1: '',\n      address2: '',\n      city: '',\n      postalCode: '',\n      countryCode: 'US',\n      stateOrProvince: 'Alabama',\n      stateOrProvinceCode: 'AL',\n    });\n  };\n\n  const handleSaveTempAddress = (e: any) => {\n    e.preventDefault();\n\n    if (inputError?.error) {\n      return;\n    }\n\n    const add = {\n      ...tempBillingAddress,\n      country: countries.find((country) => country.code === tempBillingAddress.countryCode)?.name,\n      stateOrProvince:\n        countries\n          .find((country) => country.code === tempBillingAddress.countryCode)\n          ?.subdivisions.find(\n            (subdivision) => subdivision.code === tempBillingAddress.stateOrProvince,\n          )?.name ?? tempBillingAddress.stateOrProvince,\n      stateOrProvinceCode:\n        countries\n          .find((country) => country.code === tempBillingAddress.countryCode)\n          ?.subdivisions.find(\n            (subdivision) => subdivision.code === tempBillingAddress.stateOrProvince,\n          )?.code ?? tempBillingAddress.stateOrProvinceCode,\n    };\n\n    localStorage.setItem('billingAddress', JSON.stringify(add));\n    handleSelectAddress({ ...tempBillingAddress, id: billingAddress?.id } as Address);\n    setOpenEdit(false);\n  };\n\n  const handleSelectGoogleNewAddress = (address: any) => {\n    const address1 = address?.name;\n\n    const address2 = address?.vicinity;\n\n    const city = address?.address_components?.find((addressComponent: any) =>\n      addressComponent.types?.find((type: string) => type === 'administrative_area_level_2'),\n    )?.long_name;\n\n    const stateOrProvince = address?.address_components?.find((addressComponent: any) =>\n      addressComponent.types?.find((type: string) => type === 'administrative_area_level_1'),\n    )?.long_name;\n\n    const stateOrProvinceCode = address?.address_components?.find((addressComponent: any) =>\n      addressComponent.types?.find((type: string) => type === 'administrative_area_level_1'),\n    )?.short_name;\n\n    const countryCode = address?.address_components?.find((addressComponent: any) =>\n      addressComponent.types?.find((type: string) => type === 'country'),\n    )?.short_name;\n\n    const postalCode = address?.address_components?.find((addressComponent: any) =>\n      addressComponent.types?.find((type: string) => type === 'postal_code'),\n    )?.long_name;\n\n    setTempBillingAddress({\n      ...tempBillingAddress,\n      address1,\n      address2,\n      city,\n      stateOrProvince,\n      stateOrProvinceCode,\n      countryCode,\n      postalCode,\n    });\n  };\n\n  return (\n    <Form autoComplete=\"on\" className=\"billing-address-form\">\n      {shouldRenderStaticAddress && billingAddress && (\n        <div className=\"form-fieldset\">\n          <StaticBillingAddress\n            address={billingAddress}\n            isEditable={false}\n            onEdit={() => {}}\n            showSameAsShippingLable={isEqualAddress(billingAddress, selectedShippingAddress)}\n            type={CheckoutStepType?.Billing}\n          />\n        </div>\n      )}\n      <div className=\"billing-address-add-new-container\">\n        <div className=\"billing-address-add-new\" onClick={handleAddNewTempAddress}>\n          Add new Address\n        </div>\n      </div>\n      <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n        {hasAddresses && !shouldRenderStaticAddress && !openEdit && (\n          <Fieldset id=\"billingAddresses\">\n            <LoadingOverlay isLoading={isResettingAddress}>\n              <div className=\"custom-billing-address-list\">\n                {billingAddressesToShow.map((address, index: number) => {\n                  return (\n                    <div className=\"custom-billing-address-container\" key={index}>\n                      <div\n                        className=\"custom-billing-address\"\n                        onClick={(event) => {\n                          event.preventDefault();\n                          handleSelectAddress({ ...address, id: billingAddress?.id } as Address);\n                        }}\n                      >\n                        <input\n                          checked={isEqualAddress(address, billingAddressFromProps)}\n                          className=\"billing-address-input\"\n                          type=\"radio\"\n                        />\n                        <div className=\"billing-address-container\">\n                          <StaticAddress address={address as Address} />\n                        </div>\n                      </div>\n                      {isEqualAddress(address, selectedShippingAddress) && (\n                        <div className=\"billing-addres-same-shipping-label\">\n                          same as shipping address\n                        </div>\n                      )}\n                      {isEqualAddress(address, tempBillingAddress) && (\n                        <div\n                          className=\"billing-addres-edit-label\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setOpenEdit(true);\n                            e.stopPropagation();\n                          }}\n                        >\n                          edit\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n\n        {openEdit && (\n          <AddressFormSkeleton isLoading={isResettingAddress}>\n            <div>\n              <div className=\"temp-billing-address-container\">\n                <div className=\"temp-billing-address-name-container\">\n                  <div className=\"temp-billing-address-firstname\">\n                    <InputField\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, firstName: e.target.value })\n                      }\n                      title=\"First Name\"\n                      value={tempBillingAddress.firstName}\n                    />\n                  </div>\n                  <div className=\"temp-billing-address-lastname\">\n                    <InputField\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      onChange={(e: { target: { value: any } }) => {\n                        setTempBillingAddress({ ...tempBillingAddress, lastName: e.target.value });\n                      }}\n                      title=\"Last Name\"\n                      value={tempBillingAddress.lastName}\n                    />\n                  </div>\n                </div>\n                <div className=\"temp-billing-address1-container\">\n                  {googleMapsApiKey ? (\n                    <CustomGoogleAutocomplete\n                      googleMapsApiKey={googleMapsApiKey}\n                      libraries={['places']}\n                      onAddressSelect={handleSelectGoogleNewAddress}\n                      onChange={(value) => {\n                        setTempBillingAddress({ ...tempBillingAddress, address1: value });\n                      }}\n                      title=\"Address 1\"\n                      value={tempBillingAddress?.address1 ?? ''}\n                    />\n                  ) : (\n                    <InputField\n                      id=\"address1\"\n                      name=\"address1\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, address1: e.target.value })\n                      }\n                      title=\"Address\"\n                      value={tempBillingAddress.address1}\n                    />\n                  )}\n                </div>\n                <div className=\"temp-billing-address2-container\">\n                  <InputField\n                    id=\"address2\"\n                    name=\"address2\"\n                    onChange={(e: { target: { value: any } }) =>\n                      setTempBillingAddress({ ...tempBillingAddress, address2: e.target.value })\n                    }\n                    title=\"Address\"\n                    value={tempBillingAddress.address2}\n                  />\n                </div>\n                <div className=\"temp-billing-address-country-container\">\n                  <select\n                    className=\"temp-billing-address-country-select\"\n                    onChange={(e) =>\n                      setTempBillingAddress({ ...tempBillingAddress, countryCode: e.target.value })\n                    }\n                    value={tempBillingAddress.countryCode || 'US'}\n                  >\n                    {countries.map((country) => (\n                      <option key={country.code} value={country.code}>\n                        {country.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"temp-billing-address-state-city-container\">\n                  <div className=\"temp-billing-address-state\">\n                    {(\n                      (countries?.find((c) => c.code === tempBillingAddress.countryCode) &&\n                        countries?.find((c) => c.code === tempBillingAddress.countryCode)\n                          ?.subdivisions) ??\n                      []\n                    )?.length > 0 ? (\n                      <div className=\"temp-billing-address-state-container\">\n                        <select\n                          className=\"temp-billing-address-state-select\"\n                          onChange={(e) =>\n                            setTempBillingAddress({\n                              ...tempBillingAddress,\n                              stateOrProvince: e.target.value,\n                            })\n                          }\n                          value={tempBillingAddress.stateOrProvinceCode}\n                        >\n                          {(\n                            countries?.find((c) => c.code === tempBillingAddress.countryCode)\n                              ?.subdivisions ?? []\n                          ).map((state) => (\n                            <option key={state.code} value={state.code}>\n                              {state.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    ) : (\n                      <div className=\"temp-billing-address-state-container\">\n                        <InputField\n                          id=\"stateOrProvince\"\n                          name=\"stateOrProvince\"\n                          onChange={(e: { target: { value: any } }) =>\n                            setTempBillingAddress({\n                              ...tempBillingAddress,\n                              stateOrProvince: e.target.value,\n                            })\n                          }\n                          title=\"State Or Province\"\n                          value={tempBillingAddress.stateOrProvince}\n                        />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"temp-billing-address-city-container\">\n                    <InputField\n                      id=\"city\"\n                      name=\"city\"\n                      onChange={(e: { target: { value: any } }) =>\n                        setTempBillingAddress({ ...tempBillingAddress, city: e.target.value })\n                      }\n                      title=\"City\"\n                      value={tempBillingAddress.city}\n                    />\n                  </div>\n                </div>\n                <div className=\"temp-billing-address-postalcode-phone-container\">\n                  <div className=\"temp-billing-address-postalcode-container\">\n                    <InputField\n                      id=\"postalCode\"\n                      name=\"postalCode\"\n                      onChange={(e: { target: { value: any } }) => {\n                        const value = e.target.value;\n                        const pattern = /^[#.0-9a-zA-Z\\s-]{4,12}$/;\n\n                        if (!pattern.test(value)) {\n                          setInputError({\n                            input: 'postalCode',\n                            error: true,\n                            type: 'validationMessage',\n                          });\n                        } else {\n                          setInputError({\n                            input: 'postalCode',\n                            error: false,\n                            type: 'noError',\n                          });\n                        }\n\n                        setTempBillingAddress({\n                          ...tempBillingAddress,\n                          postalCode: value,\n                        });\n                      }}\n                      title=\"Postal Code\"\n                      value={tempBillingAddress.postalCode}\n                    />\n                    {inputError.input === 'postalCode' && inputError.error && (\n                      <div className=\"form-field-error-message\">Enter a valid postal code</div>\n                    )}\n                  </div>\n                  <div className=\"temp-billing-address-phone-container\">\n                    <InputField\n                      id=\"phone\"\n                      name=\"phone\"\n                      onChange={(e: { target: { value: any } }) => {\n                        const value = e.target.value;\n                        const pattern = /^\\+[1-9]{1}[0-9]{9,14}$/;\n\n                        setTempBillingAddress({ ...tempBillingAddress, phone: value });\n\n                        if (!pattern.test(value)) {\n                          setInputError({\n                            input: 'phone',\n                            error: true,\n                            type: 'validationMessage',\n                          });\n                        } else {\n                          setInputError({\n                            input: 'phone',\n                            error: false,\n                            type: 'noError',\n                          });\n                        }\n                      }}\n                      title=\"Phone\"\n                      value={tempBillingAddress.phone}\n                    />\n                    {inputError.input === 'phone' && inputError.error && (\n                      <div className=\"form-field-error-message\">Enter a valid phone number</div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"temp-billing-address-button-container\">\n                  <button\n                    className=\"temp-billing-address-cancel-button\"\n                    onClick={() => setOpenEdit(false)}\n                    type=\"button\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    className=\"temp-billing-address-save-button\"\n                    onClick={handleSaveTempAddress}\n                    type=\"button\"\n                  >\n                    Save\n                  </button>\n                </div>\n              </div>\n            </div>\n            {/* <AddressForm formFields={getFields(countryCode)} /> */}\n          </AddressFormSkeleton>\n        )}\n      </Fieldset>\n      <div className=\"form-actions\">\n        <Button\n          disabled={isUpdating || isResettingAddress}\n          id=\"checkout-billing-continue\"\n          isLoading={isUpdating || isResettingAddress}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default withLanguage(\n  withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n      ...mapAddressToFormValues(\n        getFields(billingAddress && billingAddress.countryCode),\n        billingAddress,\n      ),\n      orderComment: customerMessage,\n    }),\n    isInitialValid: ({ billingAddress, getFields, language }) =>\n      !!billingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(billingAddress.countryCode),\n      }).isValidSync(billingAddress),\n    validationSchema: ({ language, getFields, methodId }: BillingFormProps & WithLanguageProps) =>\n      methodId === 'amazonpay'\n        ? lazy<Partial<AddressFormValues>>((values) =>\n            getCustomFormFieldsValidationSchema({\n              translate: getTranslateAddressError(language),\n              formFields: getFields(values && values.countryCode),\n            }),\n          )\n        : lazy<Partial<AddressFormValues>>((values) =>\n            getAddressFormFieldsValidationSchema({\n              language,\n              formFields: getFields(values && values.countryCode),\n            }),\n          ),\n    enableReinitialize: true,\n  })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import {\n  Address,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Country,\n  Customer,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n  navigateNextStep(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isInitializing: boolean;\n  isUpdating: boolean;\n  shouldShowOrderComments: boolean;\n  billingAddress?: Address;\n  methodId?: string;\n  isFloatingLabelEnabled?: boolean;\n  getFields(countryCode?: string): FormField[];\n  initialize(): Promise<CheckoutSelectors>;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n  selectedShippingAddress: Address;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n  async componentDidMount(): Promise<void> {\n    const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n    try {\n      await initialize();\n      onReady();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  }\n\n  render(): ReactNode {\n    const { updateAddress, isInitializing, selectedShippingAddress, ...props } = this.props;\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing}>\n        <div className=\"checkout-form\">\n          <div className=\"form-legend-container\">\n            <Legend testId=\"billing-address-heading\">\n              <TranslatedString id=\"billing.billing_address_heading\" />\n            </Legend>\n          </div>\n          <BillingForm\n            {...props}\n            onSubmit={this.handleSubmit}\n            selectedShippingAddress={selectedShippingAddress}\n            updateAddress={updateAddress}\n          />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleSubmit: (values: BillingFormValues) => void = async ({\n    orderComment,\n    ...addressValues\n  }) => {\n    const {\n      updateAddress,\n      updateCheckout,\n      customerMessage,\n      billingAddress,\n      navigateNextStep,\n      onUnhandledError,\n    } = this.props;\n\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const address = mapAddressFromFormValues(addressValues);\n\n    if (address && !isEqualAddress(address, billingAddress)) {\n      promises.push(updateAddress(address));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep();\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nfunction mapToBillingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n  const {\n    data: {\n      getCheckout,\n      getConfig,\n      getCart,\n      getCustomer,\n      getBillingAddress,\n      getBillingAddressFields,\n      getBillingCountries,\n      getShippingAddress,\n    },\n    statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n  } = checkoutState;\n\n  const config = getConfig();\n  const customer = getCustomer();\n  const checkout = getCheckout();\n  const cart = getCart();\n\n  if (!config || !customer || !checkout || !cart) {\n    return null;\n  }\n\n  const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  return {\n    billingAddress: getBillingAddress(),\n    countries: getBillingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    getFields: getBillingAddressFields,\n    googleMapsApiKey,\n    initialize: checkoutService.loadBillingAddressFields,\n    isInitializing: isLoadingBillingCountries(),\n    isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n    methodId: getBillingMethodId(checkout),\n    shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n    updateAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    selectedShippingAddress: getShippingAddress() || ({} as Address),\n  };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n","import { Library } from '@googlemaps/js-api-loader';\nimport { StandaloneSearchBox, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useRef } from 'react';\n\nimport './gogleAutoFile.scss';\n\ninterface AddressAutoFillProps {\n  libraries: Library[];\n  title: string;\n  value: string;\n  onChange: (value: string) => void;\n  googleMapsApiKey: string;\n  onAddressSelect: (address: any) => void;\n}\n\nfunction AddressAutoFill({\n  libraries,\n  title,\n  googleMapsApiKey,\n  value,\n  onChange,\n  onAddressSelect,\n}: AddressAutoFillProps) {\n  const inputRef = useRef<google.maps.places.SearchBox | null>(null);\n\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey,\n    libraries,\n  });\n\n  const handleOnPlacesChanged = () => {\n    if (inputRef.current) {\n      const addressList = inputRef.current.getPlaces();\n\n      if (!addressList) {\n        return;\n      }\n\n      onAddressSelect(addressList[0]);\n    }\n  };\n\n  return (\n    <>\n      {isLoaded && (\n        <StandaloneSearchBox\n          onLoad={(ref) => (inputRef.current = ref)}\n          onPlacesChanged={handleOnPlacesChanged}\n        >\n          <div className=\"google-autocomplete-container\">\n            <div className=\"google-autocomplete-entryarea\">\n              <input\n                className=\"google-autocomplete-input-field-input\"\n                onChange={(e) => onChange(e.target.value)}\n                placeholder=\"\"\n                type=\"text\"\n                value={value}\n              />\n              <div className=\"google-autocomplete-labelline\">{title}</div>\n            </div>\n          </div>\n        </StandaloneSearchBox>\n      )}\n    </>\n  );\n}\n\nexport default AddressAutoFill;\n","import React, { InputHTMLAttributes } from 'react';\n\nimport './inputField.scss';\n\ninterface InputFieldProps extends InputHTMLAttributes<HTMLInputElement> {\n  id: string;\n  name: string;\n  title: string;\n  value: string;\n  onChange: any;\n}\n\nexport const InputField = ({ id, name, title, value, onChange, ...rest }: InputFieldProps) => {\n  return (\n    <div className=\"container\">\n      <div className=\"entryarea\">\n        <input\n          {...rest}\n          className=\"input-field-input\"\n          id={id}\n          name={name}\n          onChange={onChange}\n          placeholder=\"\"\n          type=\"text\"\n          value={value}\n        />\n        <div className=\"labelline\">{title}</div>\n      </div>\n    </div>\n  );\n};\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import {\n    CheckoutPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n} from '@bigcommerce/checkout-sdk';\n\nexport default function isGiftCertificatePayment(\n    payment: OrderPayment | CheckoutPayment,\n): payment is GiftCertificateOrderPayment {\n    return payment.providerId === 'giftcertificate';\n}\n","import { CheckoutPayment, OrderPayment } from '@bigcommerce/checkout-sdk';\n\nexport default function isStoreCreditPayment(payment: OrderPayment | CheckoutPayment): boolean {\n    return payment.providerId === 'storecredit';\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n"],"names":["mapAddressFromFormValues","formValues","customFields","address","shouldSaveAddress","withLanguage","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","googleMapsApiKey","countries","isUpdating","methodId","updateAddress","onUnhandledError","selectedShippingAddress","navigateNextStep","useState","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","usePayPalFastlaneAddress","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shouldRenderStaticAddress","addressInStore","JSON","parse","localStorage","getItem","openEdit","setOpenEdit","stateOrProvince","stateOrProvinceCode","tempBillingAddress","setTempBillingAddress","billingAddressFromProps","setBillingAddressFromProps","input","error","type","inputError","setInputError","billingAddressesToShow","filter","addres","isValidAddress","firstName","lastName","address1","length","city","postalCode","billingAddresses","hasAddresses","email","useEffect","company","handleSelectAddress","Error","Form","autoComplete","className","StaticBillingAddress","isEditable","onEdit","showSameAsShippingLable","isEqualAddress","CheckoutStepType","onClick","e","preventDefault","address2","Fieldset","id","ref","LoadingOverlay","isLoading","map","index","key","event","checked","StaticAddress","stopPropagation","AddressFormSkeleton","name","onChange","target","value","title","libraries","onAddressSelect","vicinity","address_components","find","addressComponent","types","long_name","short_name","country","code","c","subdivisions","state","test","phone","add","subdivision","setItem","stringify","Button","disabled","variant","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","addressValues","this","props","updateCheckout","promises","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","getShippingAddress","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","customer","cart","checkoutSettings","enableOrderComments","countriesWithAutocomplete","loadBillingAddressFields","shouldShowOrderComments","getShippableItemsCount","updateBillingAddress","isFloatingLabelEnabled","Billing","inputRef","isLoaded","onLoad","current","onPlacesChanged","addressList","getPlaces","placeholder","InputField","rest","payments","payment","isGiftCertificatePayment","isStoreCreditPayment","lineItems","physicalItems","item","addedByPromotion"],"sourceRoot":""}