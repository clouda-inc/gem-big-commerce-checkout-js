{"version":3,"file":"shipping-2a527a3c.js","mappings":"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","sources":["webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/Extension.tsx","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\n\nexport enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n    ShippingSelectedShippingMethod = 'extension-region-shipping-selectedshippingmethod',\n    SummaryAfter = 'extension-region-summary-after',\n    SummaryLastItemAfter = 'extension-region-summary-lastitem-after',\n}\n\nexport const extensionRegionToContainerMap: Record<ExtensionRegion, ExtensionRegionContainer> = {\n    [ExtensionRegion.ShippingShippingAddressFormBefore]:\n        ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n    [ExtensionRegion.ShippingShippingAddressFormAfter]:\n        ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n    [ExtensionRegion.ShippingSelectedShippingMethod]:\n        ExtensionRegionContainer.ShippingSelectedShippingMethod,\n    [ExtensionRegion.SummaryAfter]: ExtensionRegionContainer.SummaryAfter,\n    [ExtensionRegion.SummaryLastItemAfter]: ExtensionRegionContainer.SummaryLastItemAfter,\n};\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { extensionRegionToContainerMap } from './ExtensionRegionContainer';\nimport { useExtensions } from './useExtensions';\n\ninterface ExtensionProps {\n    region: ExtensionRegion;\n}\n\nexport const Extension = ({ region }: ExtensionProps): React.JSX.Element | null => {\n    const {\n        checkoutState: {\n            data: { getExtensions, getConfig, getCheckout },\n        },\n    } = useCheckout();\n    const extensions = getExtensions();\n    const config = getConfig();\n    const checkout = getCheckout();\n    const { extensionService } = useExtensions();\n    const isRegionEnabled =\n        extensions && config && checkout && extensionService.isRegionEnabled(region);\n    const containerId = extensionRegionToContainerMap[region];\n\n    useEffect(() => {\n        if (isRegionEnabled) {\n            void extensionService.renderExtension(containerId, region);\n\n            return () => {\n                extensionService.removeListeners(region);\n            };\n        }\n    }, [containerId, extensionService, isRegionEnabled, region]);\n\n    if (isRegionEnabled) {\n        return <div id={containerId} />;\n    }\n\n    return null;\n};\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n  WithCheckoutShippingOptionsProps &\n  AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n  ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n  private unsubscribe?: () => void;\n\n  componentDidMount(): void {\n    const { subscribeToConsignments } = this.props;\n\n    this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n  }\n\n  componentDidUpdate(): void {\n    const { analyticsTracker, consignments, shouldShowShippingOptions } = this.props;\n\n    if (consignments?.length && shouldShowShippingOptions) {\n      analyticsTracker.showShippingMethods();\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      consignments,\n      isMultiShippingMode,\n      selectShippingOption,\n      isLoading,\n      shouldShowShippingOptions,\n      invalidShippingMessage,\n      methodId,\n    } = this.props;\n\n    if (!consignments?.length || !shouldShowShippingOptions) {\n      return (\n        <ChecklistSkeleton\n          additionalClassName=\"shippingOptions-skeleton\"\n          isLoading={isLoading()}\n          rows={2}\n        >\n          {this.renderNoShippingOptions(\n            <TranslatedString\n              id={\n                methodId || isMultiShippingMode\n                  ? 'shipping.select_shipping_address_text'\n                  : 'shipping.enter_shipping_address_text'\n              }\n            />,\n          )}\n        </ChecklistSkeleton>\n      );\n    }\n\n    return (\n      <>\n        {consignments.map((consignment) => (\n          <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n            {isMultiShippingMode && this.renderConsignment(consignment)}\n\n            <ShippingOptionsList\n              consignmentId={consignment.id}\n              inputName={getRadioInputName(consignment.id)}\n              isLoading={isLoading(consignment.id)}\n              isMultiShippingMode={isMultiShippingMode}\n              onSelectedOption={selectShippingOption}\n              selectedShippingOptionId={\n                consignment.selectedShippingOption && consignment.selectedShippingOption.id\n              }\n              shippingOptions={consignment.availableShippingOptions}\n            />\n\n            {(!consignment.availableShippingOptions ||\n              !consignment.availableShippingOptions.length) && (\n              <ChecklistSkeleton\n                additionalClassName=\"shippingOptions-skeleton\"\n                isLoading={isLoading(consignment.id)}\n                rows={2}\n              >\n                {this.renderNoShippingOptions(invalidShippingMessage)}\n              </ChecklistSkeleton>\n            )}\n          </div>\n        ))}\n      </>\n    );\n  }\n\n  private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n    const { selectShippingOption, setFieldValue } = this.props;\n\n    const consignment = (data.getConsignments() || []).find(\n      ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n        !selectedShippingOption && shippingOptions,\n    );\n\n    if (!consignment || !consignment.availableShippingOptions) {\n      return;\n    }\n\n    const { availableShippingOptions, id } = consignment;\n    const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n    const singleShippingOption =\n      availableShippingOptions.length === 1 && availableShippingOptions[0];\n    const defaultShippingOption = recommendedOption || singleShippingOption;\n\n    if (!defaultShippingOption) {\n      return;\n    }\n\n    await selectShippingOption(id, defaultShippingOption.id);\n    setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n  };\n\n  private renderNoShippingOptions(message: ReactNode): ReactNode {\n    return (\n      <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n        <p\n          aria-live=\"polite\"\n          className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n          role=\"alert\"\n        >\n          {message}\n        </p>\n      </div>\n    );\n  }\n\n  private renderConsignment(consignment: Consignment): ReactNode {\n    const { cart } = this.props;\n\n    return (\n      <div className=\"staticConsignment\">\n        <strong>\n          <TranslatedString id=\"shipping.shipping_address_heading\" />\n        </strong>\n\n        <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n        <StaticConsignmentItemList cart={cart} consignment={consignment} />\n      </div>\n    );\n  }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n  return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n  shippingOptionIds: {\n    [shippingOptionIds: string]: string;\n  };\n}\n\nexport default withAnalytics(\n  withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n      const shippingOptionIds: { [id: string]: string } = {};\n\n      (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n          ? consignment.selectedShippingOption.id\n          : '';\n      });\n\n      return { shippingOptionIds };\n    },\n  })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n  isInitialValueLoaded: boolean;\n  isMultiShippingMode: boolean;\n  isUpdatingAddress?: boolean;\n  shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n  invalidShippingMessage: string;\n  methodId?: string;\n  consignments?: Consignment[];\n  cart: Cart;\n  isSelectingShippingOption(consignmentId?: string): boolean;\n  subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n  selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n  isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n  ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n  (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n    return subscribe(subscriber, ({ data }) => data.getConsignments());\n  },\n);\n\nconst isLoadingSelector = createSelector(\n  (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n  ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n  ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n  ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n  ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n  (\n    isUpdatingAddress,\n    isLoadingShippingOptions,\n    isSelectingShippingOption,\n    isUpdatingConsignment,\n    isCreatingConsignments,\n  ) => {\n    return (consignmentId?: string) => {\n      return (\n        isUpdatingAddress ||\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption(consignmentId) ||\n        isUpdatingConsignment(consignmentId) ||\n        isCreatingConsignments()\n      );\n    };\n  },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n  if (unsortedConsignments.length < 2) {\n    return unsortedConsignments;\n  }\n\n  const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n  const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n  return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n  { checkoutService, checkoutState }: CheckoutContextProps,\n  props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n  const {\n    data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n    statuses: { isSelectingShippingOption },\n  } = checkoutState;\n\n  const customer = getCustomer();\n  const cart = getCart();\n  const config = getConfig();\n  const checkout = getCheckout();\n\n  if (!config || !checkout || !customer || !cart) {\n    return null;\n  }\n\n  const consignments = sortConsignments(cart, getConsignments() || []);\n  const methodId = getShippingMethodId(checkout, config);\n  const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n  return {\n    cart,\n    consignments,\n    invalidShippingMessage: shippingQuoteFailedMessage,\n    isLoading: isLoadingSelector(checkoutState, props),\n    isSelectingShippingOption,\n    methodId,\n    selectShippingOption: checkoutService.selectConsignmentShippingOption,\n    subscribeToConsignments: subscribeToConsignmentsSelector({\n      checkoutService,\n      checkoutState,\n    }),\n  };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\n// import { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  shouldShowOrderComments: boolean;\n  shouldShowShippingOptions?: boolean;\n  shouldDisableSubmit: boolean;\n  isInitialValueLoaded: boolean;\n  isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n  cartHasChanged,\n  isMultiShippingMode,\n  // shouldShowOrderComments,\n  shouldShowShippingOptions = true,\n  shouldDisableSubmit,\n  isInitialValueLoaded,\n  isLoading,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n      <Fieldset\n        id=\"checkout-shipping-options\"\n        legend={\n          <>\n            <Legend>\n              <TranslatedString id=\"shipping.shipping_method_label\" />\n            </Legend>\n\n            {cartHasChanged && (\n              <Alert type={AlertType.Error}>\n                <strong>\n                  <TranslatedString id=\"shipping.cart_change_error\" />\n                </strong>\n              </Alert>\n            )}\n          </>\n        }\n      >\n        <ShippingOptions\n          isInitialValueLoaded={isInitialValueLoaded}\n          isMultiShippingMode={isMultiShippingMode}\n          isUpdatingAddress={isLoading}\n          shouldShowShippingOptions={shouldShowShippingOptions}\n        />\n      </Fieldset>\n\n      {/* {shouldShowOrderComments && <OrderComments />} */}\n\n      <div className=\"form-actions\">\n        <Button\n          disabled={shouldDisableSubmit}\n          id=\"checkout-shipping-continue\"\n          isLoading={isLoading}\n          type=\"submit\"\n          variant={ButtonVariant.Primary}\n        >\n          <TranslatedString id=\"common.continue_action\" />\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ShippingFormFooter;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutSelectors,\n  CheckoutStoreSelector,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n  TranslatedLink,\n  TranslatedString,\n  withLanguage,\n  WithLanguageProps,\n} from '@bigcommerce/checkout/locale';\n\nimport {\n  AddressFormModal,\n  AddressFormValues,\n  isValidAddress,\n  mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\nimport { withFormikExtended } from '../common/form';\n\nexport interface MultiShippingFormProps {\n  addresses: CustomerAddress[];\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  customerMessage: string;\n  isGuest: boolean;\n  isLoading: boolean;\n  shouldShowOrderComments: boolean;\n  defaultCountryCode?: string;\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): void;\n  onSignIn(): void;\n  getFields(countryCode?: string): FormField[];\n  onSubmit(values: MultiShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n  key: string;\n  itemId: string;\n}\n\nexport interface MultiShippingFormState {\n  items: ShippableItem[];\n  itemAddingAddress?: ShippableItemId;\n  createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n  MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n  MultiShippingFormState\n> {\n  static getDerivedStateFromProps(\n    { cart, consignments }: MultiShippingFormProps,\n    state: MultiShippingFormState,\n  ) {\n    if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n      return { items: getShippableLineItems(cart, consignments) };\n    }\n\n    return null;\n  }\n\n  state: MultiShippingFormState = { items: [] };\n\n  render(): ReactNode {\n    const {\n      addresses,\n      consignments,\n      cart,\n      isGuest,\n      onSignIn,\n      onCreateAccount,\n      cartHasChanged,\n      shouldShowOrderComments,\n      isInitialValueLoaded,\n      isLoading,\n      getFields,\n      defaultCountryCode,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n    } = this.props;\n\n    const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n    if (isGuest) {\n      return (\n        <div className=\"checkout-step-info\">\n          <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n          <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={preventDefault(onSignIn)}>\n            <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n          </a>{' '}\n          <TranslatedLink id=\"shipping.multishipping_guest_create\" onClick={onCreateAccount} />\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <ErrorModal\n          error={createCustomerAddressError}\n          message={\n            <>\n              <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n              <TranslatedString id=\"customer.create_address_error\" />\n            </>\n          }\n          onClose={this.handleCloseErrorModal}\n          shouldShowErrorCode={false}\n        />\n        <AddressFormModal\n          countries={countries}\n          countriesWithAutocomplete={countriesWithAutocomplete}\n          defaultCountryCode={defaultCountryCode}\n          getFields={getFields}\n          googleMapsApiKey={googleMapsApiKey}\n          isFloatingLabelEnabled={isFloatingLabelEnabled}\n          isLoading={isLoading}\n          isOpen={!!itemAddingAddress}\n          onRequestClose={this.handleCloseAddAddressForm}\n          onSaveAddress={this.handleSaveAddress}\n        />\n\n        <Form>\n          <ul className=\"consignmentList\">\n            {items.map((item) => (\n              <li key={item.key}>\n                <ItemAddressSelect\n                  addresses={addresses}\n                  item={item}\n                  onSelectAddress={this.handleSelectAddress}\n                  onUseNewAddress={this.handleUseNewAddress}\n                />\n              </li>\n            ))}\n          </ul>\n\n          <ShippingFormFooter\n            cartHasChanged={cartHasChanged}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={true}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowShippingOptions={!hasUnassignedLineItems(consignments, cart.lineItems)}\n          />\n        </Form>\n      </>\n    );\n  }\n\n  private handleCloseErrorModal: () => void = () => {\n    this.setState({ createCustomerAddressError: undefined });\n  };\n\n  private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n    const { createCustomerAddress } = this.props;\n    const { itemAddingAddress } = this.state;\n\n    if (!itemAddingAddress) {\n      return;\n    }\n\n    const shippingAddress = mapAddressFromFormValues(address);\n\n    await this.handleSelectAddress(\n      shippingAddress,\n      itemAddingAddress.itemId,\n      itemAddingAddress.key,\n    );\n\n    try {\n      await createCustomerAddress(shippingAddress);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.setState({ createCustomerAddressError: error });\n      }\n    }\n\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleUseNewAddress: (itemId: string, itemKey: string) => void = (itemId, itemKey) => {\n    this.setState({\n      itemAddingAddress: {\n        key: itemKey,\n        itemId,\n      },\n    });\n  };\n\n  private handleCloseAddAddressForm: () => void = () => {\n    this.setState({\n      itemAddingAddress: undefined,\n    });\n  };\n\n  private handleSelectAddress: (\n    address: Address,\n    itemId: string,\n    itemKey: string,\n  ) => Promise<void> = async (address, itemId, itemKey) => {\n    const { assignItem, onUnhandledError, getFields } = this.props;\n\n    if (!isValidAddress(address, getFields(address.countryCode))) {\n      return onUnhandledError(new AssignItemInvalidAddressError());\n    }\n\n    try {\n      const { data } = await assignItem({\n        address,\n        lineItems: [\n          {\n            itemId,\n            quantity: 1,\n          },\n        ],\n      });\n\n      this.syncItems(itemKey, address, data);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(new AssignItemFailedError(error));\n      }\n    }\n  };\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments } = this.props;\n\n    return isLoading || !hasSelectedShippingOptions(consignments);\n  };\n\n  private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n    key,\n    address,\n    data,\n  ) => {\n    const { items: currentItems } = this.state;\n    const items = updateShippableItems(\n      currentItems,\n      {\n        updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n        address,\n      },\n      {\n        cart: data.getCart(),\n        consignments: data.getConsignments(),\n      },\n    );\n\n    if (items) {\n      this.setState({ items });\n    }\n  };\n}\n\nexport interface MultiShippingFormValues {\n  orderComment: string;\n}\n\nexport default withLanguage(\n  withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n      orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n  })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","/* eslint-disable no-console */\nimport {\n  Address,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n// import { Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressForm,\n  // AddressSelect,\n  AddressType,\n  isEqualAddress,\n  isValidCustomerAddress,\n  StaticAddress,\n} from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n// import { Modal } from '../ui/modal';\n\n// import ShippingAddressEditForm from './editShippingAddress';\n// import { getRandomName } from './editShippingAddress/util';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nimport './ShippingAddressForm.scss';\n\nexport interface ShippingAddressFormProps {\n  addresses: CustomerAddress[];\n  address?: Address;\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  formFields: FormField[];\n  shouldShowSaveAddress?: boolean;\n  isFloatingLabelEnabled?: boolean;\n  onUseNewAddress(currentAddress?: Address): void;\n  onFieldChange(fieldName: string, value: string): void;\n  onAddressSelect(address: Address): void;\n  updateShippingAddress(address: Address, includeShippingOptions: boolean): void;\n}\n\ninterface ShippingEditFormState {\n  editAddress: CustomerAddress;\n  showEditAddressModal: boolean;\n}\n\nconst addressFieldName = 'shippingAddress';\nconst token = 'q64h3xndgjcrd3vn1iggj9iypp2tyzi';\n\nclass ShippingAddressForm extends Component<\n  ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>,\n  ShippingEditFormState\n> {\n  constructor(props: ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>) {\n    super(props);\n    this.state = {\n      editAddress: {} as CustomerAddress,\n      showEditAddressModal: false,\n    };\n  }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      address: shippingAddress,\n      onAddressSelect,\n      onUseNewAddress,\n      updateShippingAddress,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      formFields,\n      isLoading,\n      googleMapsApiKey,\n      isFloatingLabelEnabled,\n      formik: {\n        values: { shippingAddress: formAddress },\n      },\n    } = this.props;\n\n    const { editAddress, showEditAddressModal } = this.state;\n\n    const hasAddresses = addresses && addresses.length > 0;\n    const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n    console.log('hasValidCustomerAddress : ', hasValidCustomerAddress);\n    console.log('shippingAddress : ', shippingAddress);\n    console.log('addresses : ', addresses);\n\n    const handleUseNewAddress = () => {\n      onUseNewAddress(shippingAddress);\n    };\n\n    const handleSelectAddress = (newAddress: Address) => {\n      if (!isEqualAddress(shippingAddress, newAddress)) {\n        onAddressSelect(newAddress);\n      }\n    };\n\n    const handleEditAddress = (address: CustomerAddress) => {\n      this.setState({ editAddress: address, showEditAddressModal: true });\n    };\n\n    const handleCloseEditAddressModal = () => {\n      this.setState({ showEditAddressModal: false });\n    };\n\n    const onSubmit = (e: any) => {\n      e.preventDefault();\n      console.log('onSubmit : ', e);\n\n      const editedaddress = {\n        id: editAddress?.id,\n        first_name: editAddress?.firstName,\n        last_name: editAddress?.lastName,\n        address1: editAddress?.address1,\n        address2: editAddress?.address2,\n        city: editAddress?.city,\n        state_or_province: editAddress?.stateOrProvince,\n        postal_code: editAddress?.postalCode,\n        country_code: editAddress?.countryCode,\n        phone: editAddress?.phone,\n        address_type: editAddress?.type,\n      };\n\n      console.log('editedaddress : ', editAddress);\n      fetch('https://api.bigcommerce.com/stores/qxtizk9ym4/v3/customers/addresses', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'X-Auth-Token': token,\n        },\n        body: JSON.stringify([{ ...editedaddress }]),\n      })\n        .then((r) => r.json())\n        .then((r) => {\n          console.log('R : Result :', r.data[0]);\n          handleCloseEditAddressModal();\n          updateShippingAddress(\n            {\n              firstName: r.data[0].first_name,\n              lastName: r.data[0].last_name,\n              address1: r.data[0].address1,\n              address2: r.data[0].address2,\n              city: r.data[0].city,\n              stateOrProvince: r.data[0].state_or_province,\n              postalCode: r.data[0].postal_code,\n              countryCode: r.data[0].country_code,\n              phone: r.data[0].phone,\n              country: r.data[0].country,\n              company: r.data[0].company,\n              stateOrProvinceCode: r.data[0].state_or_province_code,\n              customFields: [],\n            },\n            true,\n          );\n          // handleSelectAddress({\n          //   firstName: r.data[0].first_name,\n          //   lastName: r.data[0].last_name,\n          //   address1: r.data[0].address1,\n          //   address2: r.data[0].address2,\n          //   city: r.data[0].city,\n          //   stateOrProvince: r.data[0].state_or_province,\n          //   postalCode: r.data[0].postal_code,\n          //   countryCode: r.data[0].country_code,\n          //   phone: r.data[0].phone,\n          //   country: r.data[0].country,\n          //   company: r.data[0].company,\n          //   stateOrProvinceCode: r.data[0].state_or_province_code,\n          //   customFields: [],\n          // });\n          // window.location.reload();\n        })\n        .catch((e) => {\n          console.error('Error : ', e);\n        });\n    };\n\n    // const handleUpdateCustomerAddress = (address: CustomerAddress) => {\n    //   console.log('address : ', address);\n    //   fetch('https://api.bigcommerce.com/stores/qxtizk9ym4/v3/customers/addresses', {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       Accept: 'application/json',\n    //       'X-Auth-Token': token,\n    //     },\n    //     body: JSON.stringify([\n    //       {\n    //         id: address?.id,\n    //         first_name: `${getRandomName()}`,\n    //         last_name: address?.lastName,\n    //         address1: address?.address1,\n    //         address2: address?.address2,\n    //         city: address?.city,\n    //         state_or_province: address?.stateOrProvince,\n    //         postal_code: address?.postalCode,\n    //         country_code: address?.countryCode,\n    //         phone: address?.phone,\n    //         address_type: address?.type,\n    //       },\n    //     ]),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((r) => {\n    //       console.log('R : Result :', r.data[0]);\n    //       handleSelectAddress(r.data[0]);\n    //       window.location.reload();\n    //     })\n    //     .catch((e) => {\n    //       console.error('Error : ', e);\n    //     });\n    // };\n\n    return (\n      <Fieldset id=\"checkoutShippingAddress\">\n        {!showEditAddressModal && hasAddresses && (\n          <Fieldset id=\"shippingAddresses\">\n            <LoadingOverlay isLoading={isLoading}>\n              <div className=\"shipping-address-list-wrapper\">\n                <div\n                  className=\"add-new-address\"\n                  data-test=\"add-new-address\"\n                  onClick={handleUseNewAddress}\n                >\n                  <TranslatedString id=\"address.enter_address_action\" />\n                </div>\n                <div className=\"shipping-address-list-container\">\n                  {addresses &&\n                    addresses?.map((address, index: number) => {\n                      return (\n                        <div className=\"shipping-address\" key={index}>\n                          <div className=\"shipping-address-with-selector\">\n                            <div>\n                              <input\n                                checked={!!isEqualAddress(shippingAddress, address)}\n                                className=\"shipping-address-with-selector-input\"\n                                onClick={() => handleSelectAddress(address)}\n                                type=\"radio\"\n                              />\n                            </div>\n                            <StaticAddress address={address} type={AddressType.Shipping} />\n                          </div>\n                          <button\n                            className=\"shipping-address-edit-button\"\n                            onClick={(event) => {\n                              event.preventDefault();\n                              // handleUpdateCustomerAddress(address);\n                              handleEditAddress(address);\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </div>\n                      );\n                    })}\n                </div>\n              </div>\n            </LoadingOverlay>\n          </Fieldset>\n        )}\n        {!hasValidCustomerAddress && (\n          <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n            <AddressForm\n              countries={countries}\n              countriesWithAutocomplete={countriesWithAutocomplete}\n              countryCode={formAddress && formAddress.countryCode}\n              fieldName={addressFieldName}\n              formFields={formFields}\n              googleMapsApiKey={googleMapsApiKey}\n              isFloatingLabelEnabled={isFloatingLabelEnabled}\n              onAutocompleteToggle={this.handleAutocompleteToggle}\n              onChange={this.handleChange}\n              setFieldValue={this.setFieldValue}\n              shouldShowSaveAddress={shouldShowSaveAddress}\n            />\n          </LoadingOverlay>\n        )}\n        {showEditAddressModal && (\n          <div className=\"edit-shipping-address-form\">\n            <div className=\"edit-shipping-address-title\">Edit Shipping Address</div>\n            <div\n              // onSubmit={onSubmit}\n              style={{ display: 'flex', flexDirection: 'column', gap: '1.875rem' }}\n            >\n              <div className=\"form-field-name-container\">\n                <div className=\"form-field-first-name form-field\">\n                  <input\n                    className=\"form-field-first-name form-field-input\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, firstName: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.firstName}\n                  />\n                </div>\n                <div className=\"form-field-last-name form-field\">\n                  <input\n                    className=\"form-field-last-name form-field-input\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, lastName: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.lastName}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-address1 form-field\">\n                <input\n                  className=\"form-field-address1 form-field-input\"\n                  id=\"address1\"\n                  name=\"address1\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address1: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address1}\n                />\n              </div>\n              <div className=\"form-field-address2 form-field\">\n                <input\n                  className=\"form-field-address2 form-field-input\"\n                  id=\"address2\"\n                  name=\"address2\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, address2: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.address2}\n                />\n              </div>\n              <div className=\"form-field-country form-field\">\n                <input\n                  className=\"form-field-country form-field-input\"\n                  id=\"country\"\n                  name=\"country\"\n                  onChange={(e) => {\n                    this.setState({ editAddress: { ...editAddress, country: e.target.value } });\n                  }}\n                  type=\"text\"\n                  value={editAddress?.country}\n                />\n              </div>\n              <div className=\"form-field-stateOrProvince-city-container\">\n                <div className=\"form-field-stateOrProvince form-field\">\n                  <input\n                    className=\"form-field-stateOrProvince form-field-input\"\n                    id=\"stateOrProvince\"\n                    name=\"stateOrProvince\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, stateOrProvince: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.stateOrProvince}\n                  />\n                </div>\n                <div className=\"form-field-city form-field\">\n                  <input\n                    className=\"form-field-city form-field-input\"\n                    id=\"city\"\n                    name=\"city\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, city: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress.city}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-postalCode-phone-container\">\n                <div className=\"form-field-postalCode form-field\">\n                  <input\n                    className=\"form-field-postalCode form-field-input\"\n                    id=\"postalCode\"\n                    name=\"postalCode\"\n                    onChange={(e) => {\n                      this.setState({\n                        editAddress: { ...editAddress, postalCode: e.target.value },\n                      });\n                    }}\n                    type=\"text\"\n                    value={editAddress?.postalCode}\n                  />\n                </div>\n                <div className=\"form-field-phone form-field\">\n                  <input\n                    className=\"form-field-phone form-field-input\"\n                    id=\"phone\"\n                    name=\"phone\"\n                    onChange={(e) => {\n                      this.setState({ editAddress: { ...editAddress, phone: e.target.value } });\n                    }}\n                    type=\"text\"\n                    value={editAddress.phone}\n                  />\n                </div>\n              </div>\n              <div className=\"form-field-saveAddress-button\">\n                <button\n                  className=\"edit-shipping-address-cancel\"\n                  onClick={handleCloseEditAddressModal}\n                  type=\"button\"\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"edit-shipping-address-submit\"\n                  onClick={(e) => onSubmit(e)}\n                  type=\"submit\"\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </Fieldset>\n    );\n  }\n\n  private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n    fieldName,\n    fieldValue,\n  ) => {\n    const {\n      formik: { setFieldValue },\n      formFields,\n    } = this.props;\n\n    const customFormFieldNames = formFields\n      .filter((field) => field.custom)\n      .map((field) => field.name);\n\n    const formFieldName = customFormFieldNames.includes(fieldName)\n      ? `customFields.${fieldName}`\n      : fieldName;\n\n    setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n  };\n\n  private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    const { onFieldChange } = this.props;\n\n    onFieldChange(fieldName, value);\n  };\n\n  private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n    isOpen,\n    inputValue,\n  }) => {\n    const { onFieldChange } = this.props;\n\n    if (!isOpen) {\n      onFieldChange('address1', inputValue);\n    }\n  };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n  Address,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport {\n  isPayPalFastlaneMethod,\n  usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n  addresses: CustomerAddress[];\n  consignments: Consignment[];\n  countries?: Country[];\n  countriesWithAutocomplete: string[];\n  formFields: FormField[];\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  hasRequestedShippingOptions: boolean;\n  isFloatingLabelEnabled?: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onAddressSelect(address: Address): void;\n  onFieldChange(name: string, value: string): void;\n  onUnhandledError?(error: Error): void;\n  onUseNewAddress(): void;\n  updateShippingAddress(address: Address, includeShippingOptions: boolean): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n  const {\n    methodId,\n    formFields,\n    countries,\n    countriesWithAutocomplete,\n    consignments,\n    googleMapsApiKey,\n    onAddressSelect,\n    onFieldChange,\n    onUseNewAddress,\n    isLoading,\n    shippingAddress,\n    hasRequestedShippingOptions,\n    addresses,\n    shouldShowSaveAddress,\n    isFloatingLabelEnabled,\n    updateShippingAddress,\n  } = props;\n\n  const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n  const { setSubmitted } = useContext(FormContext);\n\n  const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n    if (hasRequestedShippingOptions) {\n      setSubmitted(true);\n    }\n\n    onFieldChange(fieldName, value);\n  };\n\n  if (methodId === 'amazonpay' && shippingAddress) {\n    return <AmazonPayShippingAddress {...props} shippingAddress={shippingAddress} />;\n  }\n\n  if (\n    methodId &&\n    isPayPalFastlaneMethod(methodId) &&\n    shippingAddress &&\n    shouldShowPayPalFastlaneShippingForm\n  ) {\n    return (\n      <PayPalFastlaneShippingAddress\n        {...props}\n        methodId={methodId}\n        shippingAddress={shippingAddress}\n      />\n    );\n  }\n\n  return (\n    <ShippingAddressForm\n      address={shippingAddress}\n      addresses={addresses}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      formFields={formFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isLoading={isLoading}\n      onAddressSelect={onAddressSelect}\n      onFieldChange={handleFieldChange}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n      updateShippingAddress={updateShippingAddress}\n    />\n  );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isEqualAddress,\n  mapAddressFromFormValues,\n  mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n  addresses: CustomerAddress[];\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shippingAutosaveDelay?: number;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isResettingAddress: boolean;\n  isUpdatingShippingData: boolean;\n  hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n  const methodIdsWithoutCustomValidation: string[] = [\n    PaymentMethodId.BraintreeAcceleratedCheckout,\n    PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n  ];\n\n  return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isResettingAddress: false,\n    isUpdatingShippingData: false,\n    hasRequestedShippingOptions: false,\n  };\n\n  private debouncedUpdateAddress: any;\n\n  constructor(\n    props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n  ) {\n    super(props);\n\n    const { updateAddress } = this.props;\n\n    this.debouncedUpdateAddress = debounce(\n      async (address: Address, includeShippingOptions: boolean) => {\n        try {\n          await updateAddress(address, {\n            params: {\n              include: {\n                'consignments.availableShippingOptions': includeShippingOptions,\n              },\n            },\n          });\n\n          if (includeShippingOptions) {\n            this.setState({ hasRequestedShippingOptions: true });\n          }\n        } finally {\n          this.setState({ isUpdatingShippingData: false });\n        }\n      },\n      props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n    );\n  }\n\n  render(): ReactNode {\n    const {\n      addresses,\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      onUnhandledError,\n      methodId,\n      shouldShowSaveAddress,\n      countries,\n      countriesWithAutocomplete,\n      googleMapsApiKey,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      values: { shippingAddress: addressForm },\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n      // updateAddress,\n    } = this.props;\n\n    const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } = this.state;\n\n    const PAYMENT_METHOD_VALID = ['amazonpay'];\n    const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n      (method) => method === methodId,\n    );\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <ShippingAddress\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            deinitialize={deinitialize}\n            formFields={this.getFields(addressForm && addressForm.countryCode)}\n            googleMapsApiKey={googleMapsApiKey}\n            hasRequestedShippingOptions={hasRequestedShippingOptions}\n            initialize={initialize}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isResettingAddress}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onAddressSelect={this.handleAddressSelect}\n            onFieldChange={this.handleFieldChange}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={this.onUseNewAddress}\n            shippingAddress={shippingAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            updateShippingAddress={this.debouncedUpdateAddress}\n          />\n          {shouldShowBillingSameAsShipping && (\n            <div className=\"form-body\">\n              <BillingSameAsShippingField />\n            </div>\n          )}\n        </Fieldset>\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleFieldChange: (name: string) => void = async (name) => {\n    const { setFieldValue } = this.props;\n\n    if (name === 'countryCode') {\n      setFieldValue('shippingAddress.stateOrProvince', '');\n      setFieldValue('shippingAddress.stateOrProvinceCode', '');\n    }\n\n    // Enqueue the following code to run after Formik has run validation\n    await new Promise((resolve) => setTimeout(resolve));\n\n    const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n    const { hasRequestedShippingOptions } = this.state;\n\n    const { isValid } = this.props;\n\n    if (!isValid) {\n      return;\n    }\n\n    this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n  };\n\n  private updateAddressWithFormData(includeShippingOptions: boolean) {\n    const {\n      shippingAddress,\n      values: { shippingAddress: addressForm },\n    } = this.props;\n\n    const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n    if (Array.isArray(shippingAddress?.customFields)) {\n      includeShippingOptions =\n        !isEqual(shippingAddress?.customFields, updatedShippingAddress?.customFields) ||\n        includeShippingOptions;\n    }\n\n    if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n      return;\n    }\n\n    this.setState({ isUpdatingShippingData: true });\n    this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n  }\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private onUseNewAddress: () => void = async () => {\n    const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n    this.setState({ isResettingAddress: true });\n\n    try {\n      const address = await deleteConsignments();\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(\n          this.getFields(address && address.countryCode),\n          address,\n        ),\n      });\n    } catch (e) {\n      onUnhandledError(e);\n    } finally {\n      this.setState({ isResettingAddress: false });\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      shouldHaveCustomValidation(methodId)\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(SingleShippingForm),\n);\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  CustomerAddress,\n  CustomerRequestOptions,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n  addresses: CustomerAddress[];\n  cart: Cart;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customerMessage: string;\n  googleMapsApiKey?: string;\n  isBillingSameAsShipping: boolean;\n  isGuest: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowSaveAddress?: boolean;\n  shouldShowOrderComments: boolean;\n  isFloatingLabelEnabled?: boolean;\n  isInitialValueLoaded: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onCreateAccount(): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  onMultiShippingSubmit(values: MultiShippingFormValues): void;\n  onSignIn(): void;\n  onSingleShippingSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError(error: Error): void;\n  onUseNewAddress(address: Address, itemId: string): void;\n  signOut(options?: CustomerRequestOptions): void;\n  updateAddress(\n    address: Partial<Address>,\n    options: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n  addresses,\n  assignItem,\n  cart,\n  cartHasChanged,\n  createCustomerAddress,\n  consignments,\n  countries,\n  countriesWithAutocomplete,\n  onCreateAccount,\n  customerMessage,\n  deinitialize,\n  deleteConsignments,\n  getFields,\n  googleMapsApiKey,\n  initialize,\n  isBillingSameAsShipping,\n  isGuest,\n  isLoading,\n  isMultiShippingMode,\n  methodId,\n  onMultiShippingSubmit,\n  onSignIn,\n  onSingleShippingSubmit,\n  onUnhandledError,\n  onUseNewAddress,\n  shippingAddress,\n  shouldShowOrderComments,\n  shouldShowSaveAddress,\n  signOut,\n  updateAddress,\n  isShippingStepPending,\n  isFloatingLabelEnabled,\n  isInitialValueLoaded,\n}: ShippingFormProps & WithLanguageProps) => {\n  // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n  const { isPayPalFastlaneEnabled, paypalFastlaneAddresses, shouldShowPayPalFastlaneShippingForm } =\n    usePayPalFastlaneAddress();\n\n  const shippingAddresses =\n    isPayPalFastlaneEnabled && isGuest ? paypalFastlaneAddresses : addresses;\n\n  useEffect(() => {\n    if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n      initialize({ methodId });\n    }\n  }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n  return isMultiShippingMode ? (\n    <MultiShippingForm\n      addresses={shippingAddresses}\n      assignItem={assignItem}\n      cart={cart}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      createCustomerAddress={createCustomerAddress}\n      customerMessage={customerMessage}\n      defaultCountryCode={shippingAddress?.countryCode}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isGuest={isGuest}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      onCreateAccount={onCreateAccount}\n      onSignIn={onSignIn}\n      onSubmit={onMultiShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      onUseNewAddress={onUseNewAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n    />\n  ) : (\n    <SingleShippingForm\n      addresses={shippingAddresses}\n      cartHasChanged={cartHasChanged}\n      consignments={consignments}\n      countries={countries}\n      countriesWithAutocomplete={countriesWithAutocomplete}\n      customerMessage={customerMessage}\n      deinitialize={deinitialize}\n      deleteConsignments={deleteConsignments}\n      getFields={getFields}\n      googleMapsApiKey={googleMapsApiKey}\n      initialize={initialize}\n      isBillingSameAsShipping={isBillingSameAsShipping}\n      isFloatingLabelEnabled={isFloatingLabelEnabled}\n      isInitialValueLoaded={isInitialValueLoaded}\n      isLoading={isLoading}\n      isMultiShippingMode={isMultiShippingMode}\n      isShippingStepPending={isShippingStepPending}\n      methodId={methodId}\n      onSubmit={onSingleShippingSubmit}\n      onUnhandledError={onUnhandledError}\n      shippingAddress={shippingAddress}\n      shouldShowOrderComments={shouldShowOrderComments}\n      shouldShowSaveAddress={shouldShowSaveAddress}\n      signOut={signOut}\n      updateAddress={updateAddress}\n    />\n  );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n  isMultiShippingMode: boolean;\n  isGuest: boolean;\n  shouldShowMultiShipping: boolean;\n  onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n  isMultiShippingMode,\n  isGuest,\n  onMultiShippingChange,\n  shouldShowMultiShipping,\n}) => {\n  return (\n    <>\n      <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n      <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n          <TranslatedString\n            id={\n              isMultiShippingMode\n                ? isGuest\n                  ? 'shipping.multishipping_address_heading_guest'\n                  : 'shipping.multishipping_address_heading'\n                : 'shipping.shipping_address_heading'\n            }\n          />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n          <a\n            data-test=\"shipping-mode-toggle\"\n            href=\"#\"\n            onClick={preventDefault(onMultiShippingChange)}\n          >\n            <TranslatedString\n              id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n            />\n          </a>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n  Address,\n  CheckoutParams,\n  CheckoutSelectors,\n  Consignment,\n  Country,\n  FormField,\n  RequestOptions,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressFormValues,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  consignments: Consignment[];\n  countries: Country[];\n  customerMessage: string;\n  isLoading: boolean;\n  isShippingMethodLoading: boolean;\n  isMultiShippingMode: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowOrderComments: boolean;\n  step: CheckoutStepStatus;\n  isInitialValueLoaded: boolean;\n  isStripeLoading?(): void;\n  isStripeAutoStep?(): void;\n  deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  getFields(countryCode?: string): FormField[];\n  initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  onSubmit(values: SingleShippingFormValues): void;\n  onUnhandledError?(error: Error): void;\n  updateAddress(\n    address: Partial<Address>,\n    options?: RequestOptions<CheckoutParams>,\n  ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n  billingSameAsShipping: boolean;\n  shippingAddress?: AddressFormValues;\n  orderComment: string;\n}\n\ninterface SingleShippingFormState {\n  isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n  SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n  static contextType = FormContext;\n\n  state: SingleShippingFormState = {\n    isUpdatingShippingData: false,\n  };\n\n  render(): ReactNode {\n    const {\n      cartHasChanged,\n      isInitialValueLoaded,\n      isLoading,\n      countries,\n      isStripeLoading,\n      shippingAddress,\n      consignments,\n      shouldShowOrderComments,\n      initialize,\n      isValid,\n      deinitialize,\n      onSubmit,\n      isStripeAutoStep,\n      step,\n      isShippingMethodLoading,\n    } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    return (\n      <Form autoComplete=\"on\">\n        <Fieldset>\n          <StripeShippingAddress\n            consignments={consignments}\n            countries={countries}\n            deinitialize={deinitialize}\n            initialize={initialize}\n            isShippingMethodLoading={isShippingMethodLoading}\n            isStripeAutoStep={isStripeAutoStep}\n            isStripeLoading={isStripeLoading}\n            onAddressSelect={this.handleAddressSelect}\n            onSubmit={onSubmit}\n            shippingAddress={shippingAddress}\n            shouldDisableSubmit={this.shouldDisableSubmit()}\n            step={step}\n          />\n          <div className=\"form-body\">\n            <BillingSameAsShippingField />\n          </div>\n        </Fieldset>\n\n        <ShippingFormFooter\n          cartHasChanged={cartHasChanged}\n          isInitialValueLoaded={isInitialValueLoaded}\n          isLoading={isLoading || isUpdatingShippingData}\n          isMultiShippingMode={false}\n          shouldDisableSubmit={this.shouldDisableSubmit()}\n          shouldShowOrderComments={shouldShowOrderComments}\n          shouldShowShippingOptions={isValid}\n        />\n      </Form>\n    );\n  }\n\n  private shouldDisableSubmit: () => boolean = () => {\n    const { isLoading, consignments, isValid } = this.props;\n\n    const { isUpdatingShippingData } = this.state;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n  };\n\n  private handleAddressSelect: (address: Address) => void = async (address) => {\n    const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n    try {\n      await updateAddress(address);\n\n      setValues({\n        ...values,\n        shippingAddress: mapAddressToFormValues(this.getFields(address.countryCode), address),\n      });\n    } catch (error) {\n      onUnhandledError(error);\n    }\n  };\n\n  private getFields(countryCode: string | undefined): FormField[] {\n    const { getFields } = this.props;\n\n    return getFields(countryCode);\n  }\n}\n\nexport default withLanguage(\n  withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n      onSubmit(values);\n    },\n    mapPropsToValues: ({\n      getFields,\n      shippingAddress,\n      isBillingSameAsShipping,\n      customerMessage,\n    }) => ({\n      billingSameAsShipping: isBillingSameAsShipping,\n      orderComment: customerMessage,\n      shippingAddress: mapAddressToFormValues(\n        getFields(shippingAddress && shippingAddress.countryCode),\n        shippingAddress,\n      ),\n    }),\n    isInitialValid: ({ shippingAddress, getFields, language }) =>\n      !!shippingAddress &&\n      getAddressFormFieldsValidationSchema({\n        language,\n        formFields: getFields(shippingAddress.countryCode),\n      }).isValidSync(shippingAddress),\n    validationSchema: ({\n      language,\n      getFields,\n      methodId,\n    }: SingleShippingFormProps & WithLanguageProps) =>\n      methodId\n        ? object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          })\n        : object({\n            shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n              getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(formValues && formValues.countryCode),\n              }),\n            ),\n          }),\n    enableReinitialize: false,\n  })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n  Address,\n  AddressRequestBody,\n  Cart,\n  CheckoutRequestBody,\n  CheckoutSelectors,\n  Consignment,\n  ConsignmentAssignmentRequestBody,\n  Country,\n  Customer,\n  CustomerRequestOptions,\n  FormField,\n  ShippingInitializeOptions,\n  ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  step: CheckoutStepStatus;\n  onCreateAccount(): void;\n  onToggleMultiShipping(): void;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n  onSignIn(): void;\n  navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n  billingAddress?: Address;\n  cart: Cart;\n  consignments: Consignment[];\n  countries: Country[];\n  countriesWithAutocomplete: string[];\n  customer: Customer;\n  customerMessage: string;\n  googleMapsApiKey: string;\n  isGuest: boolean;\n  isInitializing: boolean;\n  isLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowMultiShipping: boolean;\n  shouldShowOrderComments: boolean;\n  shouldRenderWhileLoading: boolean;\n  providerWithCustomCheckout?: string;\n  isFloatingLabelEnabled?: boolean;\n  assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n  deleteConsignments(): Promise<Address | undefined>;\n  getFields(countryCode?: string): FormField[];\n  initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n  loadShippingAddressFields(): Promise<CheckoutSelectors>;\n  loadBillingAddressFields(): Promise<CheckoutSelectors>;\n  loadShippingOptions(): Promise<CheckoutSelectors>;\n  signOut(options?: CustomerRequestOptions): void;\n  createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n  unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n  updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n  updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n  shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n  isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n  constructor(props: ShippingProps & WithCheckoutShippingProps) {\n    super(props);\n\n    this.state = {\n      isInitializing: true,\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    const {\n      loadShippingAddressFields,\n      loadBillingAddressFields,\n      loadShippingOptions,\n      onReady = noop,\n      onUnhandledError = noop,\n    } = this.props;\n\n    try {\n      await Promise.all([\n        loadShippingAddressFields(),\n        loadShippingOptions(),\n        loadBillingAddressFields(),\n      ]);\n\n      onReady();\n    } catch (error) {\n      onUnhandledError(error);\n    } finally {\n      this.setState({ isInitializing: false });\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      isBillingSameAsShipping,\n      isGuest,\n      shouldShowMultiShipping,\n      customer,\n      updateShippingAddress,\n      initializeShippingMethod,\n      deinitializeShippingMethod,\n      isMultiShippingMode,\n      step,\n      isFloatingLabelEnabled,\n      shouldRenderStripeForm,\n      shouldRenderWhileLoading,\n      ...shippingFormProps\n    } = this.props;\n\n    const { isInitializing } = this.state;\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n      return (\n        <StripeShipping\n          {...shippingFormProps}\n          customer={customer}\n          deinitialize={deinitializeShippingMethod}\n          initialize={initializeShippingMethod}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isGuest={isGuest}\n          isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n          isLoading={isInitializing}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={this.props.isLoading}\n          onMultiShippingChange={this.handleMultiShippingModeSwitch}\n          onSubmit={this.handleSingleShippingSubmit}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n          step={step}\n          updateAddress={updateShippingAddress}\n        />\n      );\n    }\n\n    return (\n      <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n        <div className=\"checkout-form\">\n          <ShippingHeader\n            isGuest={isGuest}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingChange={this.handleMultiShippingModeSwitch}\n            shouldShowMultiShipping={shouldShowMultiShipping}\n          />\n          <ShippingForm\n            {...shippingFormProps}\n            addresses={customer.addresses}\n            deinitialize={deinitializeShippingMethod}\n            initialize={initializeShippingMethod}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n            isMultiShippingMode={isMultiShippingMode}\n            onMultiShippingSubmit={this.handleMultiShippingSubmit}\n            onSingleShippingSubmit={this.handleSingleShippingSubmit}\n            onUseNewAddress={this.handleUseNewAddress}\n            shouldShowSaveAddress={!isGuest}\n            updateAddress={updateShippingAddress}\n          />\n        </div>\n      </AddressFormSkeleton>\n    );\n  }\n\n  private handleMultiShippingModeSwitch: () => void = async () => {\n    const {\n      consignments,\n      isMultiShippingMode,\n      onToggleMultiShipping = noop,\n      onUnhandledError = noop,\n      updateShippingAddress,\n    } = this.props;\n\n    if (isMultiShippingMode && consignments.length > 1) {\n      this.setState({ isInitializing: true });\n\n      try {\n        // Collapse all consignments into one\n        await updateShippingAddress(consignments[0].shippingAddress);\n      } catch (error) {\n        onUnhandledError(error);\n      } finally {\n        this.setState({ isInitializing: false });\n      }\n    }\n\n    onToggleMultiShipping();\n  };\n\n  private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n    billingSameAsShipping,\n    shippingAddress: addressValues,\n    orderComment,\n  }) => {\n    const {\n      customerMessage,\n      updateCheckout,\n      updateShippingAddress,\n      updateBillingAddress,\n      navigateNextStep,\n      onUnhandledError,\n      shippingAddress,\n      billingAddress,\n      methodId,\n    } = this.props;\n\n    const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n    const promises: Array<Promise<CheckoutSelectors>> = [];\n    const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n    if (\n      !isEqualAddress(updatedShippingAddress, shippingAddress) ||\n      shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress\n    ) {\n      promises.push(updateShippingAddress(updatedShippingAddress || {}));\n    }\n\n    if (\n      billingSameAsShipping &&\n      updatedShippingAddress &&\n      !isEqualAddress(updatedShippingAddress, billingAddress) &&\n      !hasRemoteBilling\n    ) {\n      promises.push(updateBillingAddress(updatedShippingAddress));\n    }\n\n    if (customerMessage !== orderComment) {\n      promises.push(updateCheckout({ customerMessage: orderComment }));\n    }\n\n    try {\n      await Promise.all(promises);\n\n      navigateNextStep(billingSameAsShipping);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n\n  private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n    const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n    return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n  };\n\n  private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n    address,\n    itemId,\n  ) => {\n    const { unassignItem, onUnhandledError } = this.props;\n\n    try {\n      await unassignItem({\n        address,\n        lineItems: [\n          {\n            quantity: 1,\n            itemId,\n          },\n        ],\n      });\n\n      location.href = '/account.php?action=add_shipping_address&from=checkout';\n    } catch (error) {\n      if (error instanceof UnassignItemError) {\n        onUnhandledError(new UnassignItemError(error));\n      }\n    }\n  };\n\n  private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n    orderComment,\n  }) => {\n    const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n    try {\n      if (customerMessage !== orderComment) {\n        await updateCheckout({ customerMessage: orderComment });\n      }\n\n      navigateNextStep(false);\n    } catch (error) {\n      if (error instanceof Error) {\n        onUnhandledError(error);\n      }\n    }\n  };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n  ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n  ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n  (deleteConsignment, consignments) => async () => {\n    if (!consignments || !consignments.length) {\n      return;\n    }\n\n    const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n    return data.getShippingAddress();\n  },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n  checkoutService,\n  checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n  const {\n    data: {\n      getCart,\n      getCheckout,\n      getConfig,\n      getCustomer,\n      getConsignments,\n      getShippingAddress,\n      getBillingAddress,\n      getShippingAddressFields,\n      getShippingCountries,\n    },\n    statuses: {\n      isShippingStepPending,\n      isSelectingShippingOption,\n      isLoadingShippingOptions,\n      isUpdatingConsignment,\n      isCreatingConsignments,\n      isCreatingCustomerAddress,\n      isLoadingShippingCountries,\n      isUpdatingBillingAddress,\n      isUpdatingCheckout,\n    },\n  } = checkoutState;\n\n  const checkout = getCheckout();\n  const config = getConfig();\n  const consignments = getConsignments() || [];\n  const customer = getCustomer();\n  const cart = getCart();\n\n  if (!checkout || !config || !customer || !cart) {\n    return null;\n  }\n\n  const {\n    checkoutSettings: { enableOrderComments, features, hasMultiShippingEnabled, googleMapsApiKey },\n  } = config;\n\n  const methodId = getShippingMethodId(checkout, config);\n  const shippableItemsCount = getShippableItemsCount(cart);\n  const isLoading =\n    isLoadingShippingOptions() ||\n    isSelectingShippingOption() ||\n    isUpdatingConsignment() ||\n    isCreatingConsignments() ||\n    isUpdatingBillingAddress() ||\n    isUpdatingCheckout() ||\n    isCreatingCustomerAddress();\n  const shouldShowMultiShipping = hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n  const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n  const shippingAddress =\n    !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n  const providerWithCustomCheckout = getProviderWithCustomCheckout(\n    config.checkoutSettings.providerWithCustomCheckout,\n  );\n\n  return {\n    assignItem: checkoutService.assignItemsToAddress,\n    billingAddress: getBillingAddress(),\n    cart,\n    consignments,\n    countries: getShippingCountries() || EMPTY_ARRAY,\n    countriesWithAutocomplete,\n    customer,\n    customerMessage: checkout.customerMessage,\n    createCustomerAddress: checkoutService.createCustomerAddress,\n    deinitializeShippingMethod: checkoutService.deinitializeShipping,\n    deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n    getFields: getShippingAddressFields,\n    googleMapsApiKey,\n    initializeShippingMethod: checkoutService.initializeShipping,\n    isGuest: customer.isGuest,\n    isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n    isLoading,\n    isShippingStepPending: isShippingStepPending(),\n    loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n    loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n    loadShippingOptions: checkoutService.loadShippingOptions,\n    methodId,\n    providerWithCustomCheckout,\n    shippingAddress,\n    shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n    shouldShowMultiShipping,\n    shouldShowOrderComments: enableOrderComments,\n    signOut: checkoutService.signOutCustomer,\n    unassignItem: checkoutService.unassignItemsToAddress,\n    updateBillingAddress: checkoutService.updateBillingAddress,\n    updateCheckout: checkoutService.updateCheckout,\n    updateShippingAddress: checkoutService.updateShippingAddress,\n    isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    shouldRenderStripeForm:\n      providerWithCustomCheckout === PaymentMethodId.StripeUPE &&\n      shouldUseStripeLinkByMinimumAmount(cart),\n  };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["ExtensionRegionContainer","extensionRegionToContainerMap","ShippingShippingAddressFormBefore","ShippingShippingAddressFormAfter","ShippingSelectedShippingMethod","SummaryAfter","SummaryLastItemAfter","Extension","region","getExtensions","getConfig","getCheckout","extensions","config","checkout","extensionService","extensionContext","useContext","ExtensionContext","Error","useExtensions","isRegionEnabled","containerId","useEffect","renderExtension","removeListeners","id","data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","current","displayName","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getCustomer","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","shouldShowOrderComments","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","field","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","onAddressSelect","PayPalFastlaneShippingAddress","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","editAddress","showEditAddressModal","updateShippingAddress","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","console","log","handleCloseEditAddressModal","index","checked","newAddress","event","handleEditAddress","unmountContentWhenLoading","onAutocompleteToggle","display","flexDirection","gap","e","target","editedaddress","first_name","last_name","state_or_province","postal_code","country_code","address_type","fetch","headers","Accept","body","JSON","stringify","then","r","json","state_or_province_code","catch","Component","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","Boolean","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","handleMultiShippingModeSwitch","onToggleMultiShipping","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","shouldUseStripeLinkByMinimumAmount","Shipping"],"sourceRoot":""}